/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface QuantumPortalMinerMgrInterface extends ethers.utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "miningStake()": FunctionFragment;
    "verifyMinerSignature(bytes32,uint64,bytes32,bytes,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "miningStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMinerSignature",
    values: [
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "miningStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMinerSignature",
    data: BytesLike
  ): Result;

  events: {};
}

export class QuantumPortalMinerMgr extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: QuantumPortalMinerMgrInterface;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    miningStake(overrides?: CallOverrides): Promise<[string]>;

    verifyMinerSignature(
      msgHash: BytesLike,
      expiry: BigNumberish,
      salt: BytesLike,
      multiSig: BytesLike,
      msgValue: BigNumberish,
      minStakeAllowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { res: number }>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  miningStake(overrides?: CallOverrides): Promise<string>;

  verifyMinerSignature(
    msgHash: BytesLike,
    expiry: BigNumberish,
    salt: BytesLike,
    multiSig: BytesLike,
    msgValue: BigNumberish,
    minStakeAllowed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    miningStake(overrides?: CallOverrides): Promise<string>;

    verifyMinerSignature(
      msgHash: BytesLike,
      expiry: BigNumberish,
      salt: BytesLike,
      multiSig: BytesLike,
      msgValue: BigNumberish,
      minStakeAllowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {};

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    miningStake(overrides?: CallOverrides): Promise<BigNumber>;

    verifyMinerSignature(
      msgHash: BytesLike,
      expiry: BigNumberish,
      salt: BytesLike,
      multiSig: BytesLike,
      msgValue: BigNumberish,
      minStakeAllowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    miningStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyMinerSignature(
      msgHash: BytesLike,
      expiry: BigNumberish,
      salt: BytesLike,
      multiSig: BytesLike,
      msgValue: BigNumberish,
      minStakeAllowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
