/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface QuantumPortalLedgerMgrImplInterface extends ethers.utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "admin()": FunctionFragment;
    "authorityFinalizers(bytes32,uint256)": FunctionFragment;
    "finalizationStakes(uint256,uint256)": FunctionFragment;
    "finalizations(uint256)": FunctionFragment;
    "finalize(uint256,uint256,bytes32,address[])": FunctionFragment;
    "getBlockIdx(uint64,uint64)": FunctionFragment;
    "isLocalBlockReady(uint64)": FunctionFragment;
    "lastFinalizedBlock(uint256)": FunctionFragment;
    "lastLocalBlock(uint256)": FunctionFragment;
    "lastMinedBlock(uint256)": FunctionFragment;
    "lastRemoteMinedBlock(uint64)": FunctionFragment;
    "ledger()": FunctionFragment;
    "localBlockByNonce(uint64,uint64)": FunctionFragment;
    "localBlockTransactions(uint256,uint256)": FunctionFragment;
    "localBlocks(uint256)": FunctionFragment;
    "mineRemoteBlock(uint64,uint64,tuple[])": FunctionFragment;
    "minedBlockByNonce(uint64,uint64)": FunctionFragment;
    "minedBlockTransactions(uint256,uint256)": FunctionFragment;
    "minedBlocks(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerTransaction(uint64,address,address,address,address,uint256,uint256,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reportInvalidBlock(uint64,uint64,tuple[])": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateLedger(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "authorityFinalizers",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizationStakes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [BigNumberish, BigNumberish, BytesLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockIdx",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isLocalBlockReady",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastFinalizedBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastLocalBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastMinedBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRemoteMinedBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ledger", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "localBlockByNonce",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "localBlockTransactions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "localBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mineRemoteBlock",
    values: [
      BigNumberish,
      BigNumberish,
      {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        method: BytesLike;
        gas: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "minedBlockByNonce",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minedBlockTransactions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minedBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerTransaction",
    values: [
      BigNumberish,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reportInvalidBlock",
    values: [
      BigNumberish,
      BigNumberish,
      {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        method: BytesLike;
        gas: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLedger",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorityFinalizers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizationStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockIdx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLocalBlockReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastFinalizedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastLocalBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastMinedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRemoteMinedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ledger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "localBlockByNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "localBlockTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "localBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mineRemoteBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minedBlockByNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minedBlockTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minedBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportInvalidBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLedger",
    data: BytesLike
  ): Result;

  events: {
    "AdminSet(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class QuantumPortalLedgerMgrImpl extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: QuantumPortalLedgerMgrImplInterface;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    authorityFinalizers(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    finalizationStakes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { finalizer: string; staked: BigNumber }>;

    finalizations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        executor: string;
        finalizedBlocksHash: string;
        finalizersHash: string;
        totalBlockStake: BigNumber;
      }
    >;

    finalize(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      finalizersHash: BytesLike,
      finalizers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBlockIdx(
      chainId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isLocalBlockReady(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastFinalizedBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      }
    >;

    lastLocalBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      }
    >;

    lastMinedBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      }
    >;

    lastRemoteMinedBlock(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        }
      ] & {
        _block: [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        };
      }
    >;

    ledger(overrides?: CallOverrides): Promise<[string]>;

    localBlockByNonce(
      chainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          }
        ] & {
          metadata: [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          };
        },
        ([
          BigNumber,
          string,
          string,
          string,
          string,
          BigNumber,
          string,
          BigNumber
        ] & {
          timestamp: BigNumber;
          remoteContract: string;
          sourceMsgSender: string;
          sourceBeneficiary: string;
          token: string;
          amount: BigNumber;
          method: string;
          gas: BigNumber;
        })[]
      ]
    >;

    localBlockTransactions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber
      ] & {
        timestamp: BigNumber;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumber;
        method: string;
        gas: BigNumber;
      }
    >;

    localBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        }
      ] & {
        metadata: [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        };
      }
    >;

    mineRemoteBlock(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        method: BytesLike;
        gas: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minedBlockByNonce(
      chainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          }
        ] & {
          blockHash: string;
          miner: string;
          stake: BigNumber;
          totalValue: BigNumber;
          blockMetadata: [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          };
        },
        ([
          BigNumber,
          string,
          string,
          string,
          string,
          BigNumber,
          string,
          BigNumber
        ] & {
          timestamp: BigNumber;
          remoteContract: string;
          sourceMsgSender: string;
          sourceBeneficiary: string;
          token: string;
          amount: BigNumber;
          method: string;
          gas: BigNumber;
        })[]
      ] & {
        b: [
          string,
          string,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          }
        ] & {
          blockHash: string;
          miner: string;
          stake: BigNumber;
          totalValue: BigNumber;
          blockMetadata: [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          };
        };
        txs: ([
          BigNumber,
          string,
          string,
          string,
          string,
          BigNumber,
          string,
          BigNumber
        ] & {
          timestamp: BigNumber;
          remoteContract: string;
          sourceMsgSender: string;
          sourceBeneficiary: string;
          token: string;
          amount: BigNumber;
          method: string;
          gas: BigNumber;
        })[];
      }
    >;

    minedBlockTransactions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber
      ] & {
        timestamp: BigNumber;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumber;
        method: string;
        gas: BigNumber;
      }
    >;

    minedBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        }
      ] & {
        blockHash: string;
        miner: string;
        stake: BigNumber;
        totalValue: BigNumber;
        blockMetadata: [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        };
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerTransaction(
      remoteChainId: BigNumberish,
      remoteContract: string,
      msgSender: string,
      beneficiary: string,
      token: string,
      amount: BigNumberish,
      gas: BigNumberish,
      method: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reportInvalidBlock(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        method: BytesLike;
        gas: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLedger(
      _ledger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  authorityFinalizers(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  finalizationStakes(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { finalizer: string; staked: BigNumber }>;

  finalizations(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber] & {
      executor: string;
      finalizedBlocksHash: string;
      finalizersHash: string;
      totalBlockStake: BigNumber;
    }
  >;

  finalize(
    remoteChainId: BigNumberish,
    blockNonce: BigNumberish,
    finalizersHash: BytesLike,
    finalizers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBlockIdx(
    chainId: BigNumberish,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isLocalBlockReady(
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastFinalizedBlock(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      chainId: BigNumber;
      nonce: BigNumber;
      timestamp: BigNumber;
    }
  >;

  lastLocalBlock(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      chainId: BigNumber;
      nonce: BigNumber;
      timestamp: BigNumber;
    }
  >;

  lastMinedBlock(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      chainId: BigNumber;
      nonce: BigNumber;
      timestamp: BigNumber;
    }
  >;

  lastRemoteMinedBlock(
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      chainId: BigNumber;
      nonce: BigNumber;
      timestamp: BigNumber;
    }
  >;

  ledger(overrides?: CallOverrides): Promise<string>;

  localBlockByNonce(
    chainId: BigNumberish,
    blockNonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        }
      ] & {
        metadata: [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        };
      },
      ([
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber
      ] & {
        timestamp: BigNumber;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumber;
        method: string;
        gas: BigNumber;
      })[]
    ]
  >;

  localBlockTransactions(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      string,
      BigNumber,
      string,
      BigNumber
    ] & {
      timestamp: BigNumber;
      remoteContract: string;
      sourceMsgSender: string;
      sourceBeneficiary: string;
      token: string;
      amount: BigNumber;
      method: string;
      gas: BigNumber;
    }
  >;

  localBlocks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      chainId: BigNumber;
      nonce: BigNumber;
      timestamp: BigNumber;
    }
  >;

  mineRemoteBlock(
    remoteChainId: BigNumberish,
    blockNonce: BigNumberish,
    transactions: {
      timestamp: BigNumberish;
      remoteContract: string;
      sourceMsgSender: string;
      sourceBeneficiary: string;
      token: string;
      amount: BigNumberish;
      method: BytesLike;
      gas: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minedBlockByNonce(
    chainId: BigNumberish,
    blockNonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        string,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        }
      ] & {
        blockHash: string;
        miner: string;
        stake: BigNumber;
        totalValue: BigNumber;
        blockMetadata: [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        };
      },
      ([
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber
      ] & {
        timestamp: BigNumber;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumber;
        method: string;
        gas: BigNumber;
      })[]
    ] & {
      b: [
        string,
        string,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        }
      ] & {
        blockHash: string;
        miner: string;
        stake: BigNumber;
        totalValue: BigNumber;
        blockMetadata: [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        };
      };
      txs: ([
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber
      ] & {
        timestamp: BigNumber;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumber;
        method: string;
        gas: BigNumber;
      })[];
    }
  >;

  minedBlockTransactions(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      string,
      BigNumber,
      string,
      BigNumber
    ] & {
      timestamp: BigNumber;
      remoteContract: string;
      sourceMsgSender: string;
      sourceBeneficiary: string;
      token: string;
      amount: BigNumber;
      method: string;
      gas: BigNumber;
    }
  >;

  minedBlocks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      }
    ] & {
      blockHash: string;
      miner: string;
      stake: BigNumber;
      totalValue: BigNumber;
      blockMetadata: [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      };
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  registerTransaction(
    remoteChainId: BigNumberish,
    remoteContract: string,
    msgSender: string,
    beneficiary: string,
    token: string,
    amount: BigNumberish,
    gas: BigNumberish,
    method: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reportInvalidBlock(
    remoteChainId: BigNumberish,
    blockNonce: BigNumberish,
    transactions: {
      timestamp: BigNumberish;
      remoteContract: string;
      sourceMsgSender: string;
      sourceBeneficiary: string;
      token: string;
      amount: BigNumberish;
      method: BytesLike;
      gas: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLedger(
    _ledger: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    authorityFinalizers(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    finalizationStakes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { finalizer: string; staked: BigNumber }>;

    finalizations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        executor: string;
        finalizedBlocksHash: string;
        finalizersHash: string;
        totalBlockStake: BigNumber;
      }
    >;

    finalize(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      finalizersHash: BytesLike,
      finalizers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getBlockIdx(
      chainId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLocalBlockReady(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastFinalizedBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      }
    >;

    lastLocalBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      }
    >;

    lastMinedBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      }
    >;

    lastRemoteMinedBlock(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      }
    >;

    ledger(overrides?: CallOverrides): Promise<string>;

    localBlockByNonce(
      chainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          }
        ] & {
          metadata: [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          };
        },
        ([
          BigNumber,
          string,
          string,
          string,
          string,
          BigNumber,
          string,
          BigNumber
        ] & {
          timestamp: BigNumber;
          remoteContract: string;
          sourceMsgSender: string;
          sourceBeneficiary: string;
          token: string;
          amount: BigNumber;
          method: string;
          gas: BigNumber;
        })[]
      ]
    >;

    localBlockTransactions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber
      ] & {
        timestamp: BigNumber;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumber;
        method: string;
        gas: BigNumber;
      }
    >;

    localBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      }
    >;

    mineRemoteBlock(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        method: BytesLike;
        gas: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    minedBlockByNonce(
      chainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          }
        ] & {
          blockHash: string;
          miner: string;
          stake: BigNumber;
          totalValue: BigNumber;
          blockMetadata: [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          };
        },
        ([
          BigNumber,
          string,
          string,
          string,
          string,
          BigNumber,
          string,
          BigNumber
        ] & {
          timestamp: BigNumber;
          remoteContract: string;
          sourceMsgSender: string;
          sourceBeneficiary: string;
          token: string;
          amount: BigNumber;
          method: string;
          gas: BigNumber;
        })[]
      ] & {
        b: [
          string,
          string,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          }
        ] & {
          blockHash: string;
          miner: string;
          stake: BigNumber;
          totalValue: BigNumber;
          blockMetadata: [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          };
        };
        txs: ([
          BigNumber,
          string,
          string,
          string,
          string,
          BigNumber,
          string,
          BigNumber
        ] & {
          timestamp: BigNumber;
          remoteContract: string;
          sourceMsgSender: string;
          sourceBeneficiary: string;
          token: string;
          amount: BigNumber;
          method: string;
          gas: BigNumber;
        })[];
      }
    >;

    minedBlockTransactions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber
      ] & {
        timestamp: BigNumber;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumber;
        method: string;
        gas: BigNumber;
      }
    >;

    minedBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        }
      ] & {
        blockHash: string;
        miner: string;
        stake: BigNumber;
        totalValue: BigNumber;
        blockMetadata: [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        };
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    registerTransaction(
      remoteChainId: BigNumberish,
      remoteContract: string,
      msgSender: string,
      beneficiary: string,
      token: string,
      amount: BigNumberish,
      gas: BigNumberish,
      method: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reportInvalidBlock(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        method: BytesLike;
        gas: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLedger(_ledger: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    AdminSet(admin?: null): TypedEventFilter<[string], { admin: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    authorityFinalizers(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizationStakes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalize(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      finalizersHash: BytesLike,
      finalizers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBlockIdx(
      chainId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLocalBlockReady(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastFinalizedBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastLocalBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastMinedBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRemoteMinedBlock(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ledger(overrides?: CallOverrides): Promise<BigNumber>;

    localBlockByNonce(
      chainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    localBlockTransactions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    localBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mineRemoteBlock(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        method: BytesLike;
        gas: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minedBlockByNonce(
      chainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minedBlockTransactions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minedBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerTransaction(
      remoteChainId: BigNumberish,
      remoteContract: string,
      msgSender: string,
      beneficiary: string,
      token: string,
      amount: BigNumberish,
      gas: BigNumberish,
      method: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reportInvalidBlock(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        method: BytesLike;
        gas: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLedger(
      _ledger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authorityFinalizers(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizationStakes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalize(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      finalizersHash: BytesLike,
      finalizers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBlockIdx(
      chainId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLocalBlockReady(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastFinalizedBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastLocalBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastMinedBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRemoteMinedBlock(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ledger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    localBlockByNonce(
      chainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    localBlockTransactions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    localBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mineRemoteBlock(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        method: BytesLike;
        gas: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minedBlockByNonce(
      chainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minedBlockTransactions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minedBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerTransaction(
      remoteChainId: BigNumberish,
      remoteContract: string,
      msgSender: string,
      beneficiary: string,
      token: string,
      amount: BigNumberish,
      gas: BigNumberish,
      method: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reportInvalidBlock(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        method: BytesLike;
        gas: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLedger(
      _ledger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
