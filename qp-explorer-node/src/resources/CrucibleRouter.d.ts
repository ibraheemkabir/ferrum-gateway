/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CrucibleRouterInterface extends ethers.utils.Interface {
  functions: {
    "GOVERNANCE_GROUP_ID_MAX()": FunctionFragment;
    "NAME()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "addToQuorum(address,address,bytes32,uint64,bytes)": FunctionFragment;
    "admin()": FunctionFragment;
    "allowAmm(address,bytes32,uint64,uint64,bytes)": FunctionFragment;
    "allowedAmms(address)": FunctionFragment;
    "cancelSaltedSignature(bytes32,uint64,bytes)": FunctionFragment;
    "delegateGroupId(address,uint16,bytes32,uint64,uint64,bytes)": FunctionFragment;
    "delegatedGroupIds(address)": FunctionFragment;
    "deposit(address,address,uint256,bytes32,uint64,uint64,bytes)": FunctionFragment;
    "depositAddLiquidityStake(address,address,address,uint256,uint256,address,address,bytes32,uint64,uint256,uint64,bytes)": FunctionFragment;
    "depositAddLiquidityStakeETH(address,address,uint256,address,address,bytes32,uint64,uint64,uint64,bytes)": FunctionFragment;
    "depositAndStake(address,address,uint256,address,bytes32,uint64,uint64,bytes)": FunctionFragment;
    "depositOpen(address,address,uint256)": FunctionFragment;
    "forceRemoveFromQuorum(address)": FunctionFragment;
    "initialize(address,uint64,uint16,uint8,address[])": FunctionFragment;
    "openCaps(address)": FunctionFragment;
    "overrideFee(address,address,uint8,uint64,bytes32,uint64,uint64,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "quorumList(uint256)": FunctionFragment;
    "quorumSubscriptions(address)": FunctionFragment;
    "quorums(address)": FunctionFragment;
    "quorumsSubscribers(address)": FunctionFragment;
    "removeAmm(address)": FunctionFragment;
    "removeFromQuorum(address,bytes32,uint64,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setOpenCap(address,uint256,bytes32,uint64,uint64,bytes)": FunctionFragment;
    "setTaxDistributor(address)": FunctionFragment;
    "stakeFor(address,address,address,uint256)": FunctionFragment;
    "taxDistributor()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCrucibleFees(address,uint64,uint64,bytes32,uint64,uint64,bytes)": FunctionFragment;
    "updateMinSignature(address,uint16,bytes32,uint64,bytes)": FunctionFragment;
    "upgradeRouter(address,address)": FunctionFragment;
    "usedHashes(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "GOVERNANCE_GROUP_ID_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addToQuorum",
    values: [string, string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowAmm",
    values: [string, BytesLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "allowedAmms", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancelSaltedSignature",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateGroupId",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatedGroupIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      string,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAddLiquidityStake",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAddLiquidityStakeETH",
    values: [
      string,
      string,
      BigNumberish,
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndStake",
    values: [
      string,
      string,
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOpen",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceRemoveFromQuorum",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(functionFragment: "openCaps", values: [string]): string;
  encodeFunctionData(
    functionFragment: "overrideFee",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quorumList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumSubscriptions",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "quorums", values: [string]): string;
  encodeFunctionData(
    functionFragment: "quorumsSubscribers",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "removeAmm", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeFromQuorum",
    values: [string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOpenCap",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxDistributor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeFor",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "taxDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCrucibleFees",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinSignature",
    values: [string, BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeRouter",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "usedHashes",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "GOVERNANCE_GROUP_ID_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowAmm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedAmms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSaltedSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateGroupId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatedGroupIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAddLiquidityStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAddLiquidityStakeETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceRemoveFromQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openCaps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "overrideFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quorumList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quorums", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumsSubscribers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeAmm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOpenCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTaxDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taxDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCrucibleFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedHashes", data: BytesLike): Result;

  events: {
    "AddedToQuorum(address,address)": EventFragment;
    "AdminSet(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "QuorumCreated(tuple)": EventFragment;
    "QuorumUpdated(tuple)": EventFragment;
    "RemovedFromQuorum(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedToQuorum"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedFromQuorum"): EventFragment;
}

export class CrucibleRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CrucibleRouterInterface;

  functions: {
    GOVERNANCE_GROUP_ID_MAX(overrides?: CallOverrides): Promise<[number]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    addToQuorum(
      _address: string,
      quorumId: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allowAmm(
      amm: string,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowedAmms(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    cancelSaltedSignature(
      salt: BytesLike,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateGroupId(
      crucible: string,
      delegatedGroupId: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegatedGroupIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    deposit(
      to: string,
      crucible: string,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositAddLiquidityStake(
      to: string,
      crucible: string,
      pairToken: string,
      baseAmount: BigNumberish,
      pairAmount: BigNumberish,
      ammRouter: string,
      stake: string,
      salt: BytesLike,
      expiry: BigNumberish,
      deadline: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositAddLiquidityStakeETH(
      to: string,
      crucible: string,
      baseAmount: BigNumberish,
      ammRouter: string,
      stake: string,
      salt: BytesLike,
      expiry: BigNumberish,
      deadline: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositAndStake(
      to: string,
      crucible: string,
      amount: BigNumberish,
      stake: string,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositOpen(
      to: string,
      crucible: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceRemoveFromQuorum(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      ownerGroupId: BigNumberish,
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openCaps(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    overrideFee(
      crucible: string,
      target: string,
      overrideType: BigNumberish,
      newFeeX10000: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    quorumList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    quorumSubscriptions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        id: string;
        groupId: BigNumber;
        minSignatures: number;
        ownerGroupId: number;
      }
    >;

    quorums(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        id: string;
        groupId: BigNumber;
        minSignatures: number;
        ownerGroupId: number;
      }
    >;

    quorumsSubscribers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeAmm(
      amm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeFromQuorum(
      _address: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOpenCap(
      crucible: string,
      cap: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaxDistributor(
      _taxDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeFor(
      to: string,
      token: string,
      stake: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taxDistributor(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCrucibleFees(
      crucible: string,
      newFeeOnTransferX10000: BigNumberish,
      newFeeOnWithdrawX10000: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMinSignature(
      quorumId: string,
      minSignature: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeRouter(
      crucible: string,
      newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
  };

  GOVERNANCE_GROUP_ID_MAX(overrides?: CallOverrides): Promise<number>;

  NAME(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  addToQuorum(
    _address: string,
    quorumId: string,
    salt: BytesLike,
    expiry: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  allowAmm(
    amm: string,
    salt: BytesLike,
    expiry: BigNumberish,
    expectedGroupId: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowedAmms(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  cancelSaltedSignature(
    salt: BytesLike,
    expectedGroupId: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateGroupId(
    crucible: string,
    delegatedGroupId: BigNumberish,
    salt: BytesLike,
    expiry: BigNumberish,
    expectedGroupId: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegatedGroupIds(arg0: string, overrides?: CallOverrides): Promise<number>;

  deposit(
    to: string,
    crucible: string,
    amount: BigNumberish,
    salt: BytesLike,
    expiry: BigNumberish,
    expectedGroupId: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositAddLiquidityStake(
    to: string,
    crucible: string,
    pairToken: string,
    baseAmount: BigNumberish,
    pairAmount: BigNumberish,
    ammRouter: string,
    stake: string,
    salt: BytesLike,
    expiry: BigNumberish,
    deadline: BigNumberish,
    expectedGroupId: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositAddLiquidityStakeETH(
    to: string,
    crucible: string,
    baseAmount: BigNumberish,
    ammRouter: string,
    stake: string,
    salt: BytesLike,
    expiry: BigNumberish,
    deadline: BigNumberish,
    expectedGroupId: BigNumberish,
    multiSignature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositAndStake(
    to: string,
    crucible: string,
    amount: BigNumberish,
    stake: string,
    salt: BytesLike,
    expiry: BigNumberish,
    expectedGroupId: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositOpen(
    to: string,
    crucible: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceRemoveFromQuorum(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    quorumId: string,
    groupId: BigNumberish,
    minSignatures: BigNumberish,
    ownerGroupId: BigNumberish,
    addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openCaps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  overrideFee(
    crucible: string,
    target: string,
    overrideType: BigNumberish,
    newFeeX10000: BigNumberish,
    salt: BytesLike,
    expiry: BigNumberish,
    expectedGroupId: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  quorumList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  quorumSubscriptions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, number] & {
      id: string;
      groupId: BigNumber;
      minSignatures: number;
      ownerGroupId: number;
    }
  >;

  quorums(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, number] & {
      id: string;
      groupId: BigNumber;
      minSignatures: number;
      ownerGroupId: number;
    }
  >;

  quorumsSubscribers(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeAmm(
    amm: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeFromQuorum(
    _address: string,
    salt: BytesLike,
    expiry: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOpenCap(
    crucible: string,
    cap: BigNumberish,
    salt: BytesLike,
    expiry: BigNumberish,
    expectedGroupId: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaxDistributor(
    _taxDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeFor(
    to: string,
    token: string,
    stake: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taxDistributor(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCrucibleFees(
    crucible: string,
    newFeeOnTransferX10000: BigNumberish,
    newFeeOnWithdrawX10000: BigNumberish,
    salt: BytesLike,
    expiry: BigNumberish,
    expectedGroupId: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMinSignature(
    quorumId: string,
    minSignature: BigNumberish,
    salt: BytesLike,
    expiry: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeRouter(
    crucible: string,
    newRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    GOVERNANCE_GROUP_ID_MAX(overrides?: CallOverrides): Promise<number>;

    NAME(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    addToQuorum(
      _address: string,
      quorumId: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    allowAmm(
      amm: string,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    allowedAmms(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    cancelSaltedSignature(
      salt: BytesLike,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateGroupId(
      crucible: string,
      delegatedGroupId: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    delegatedGroupIds(arg0: string, overrides?: CallOverrides): Promise<number>;

    deposit(
      to: string,
      crucible: string,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositAddLiquidityStake(
      to: string,
      crucible: string,
      pairToken: string,
      baseAmount: BigNumberish,
      pairAmount: BigNumberish,
      ammRouter: string,
      stake: string,
      salt: BytesLike,
      expiry: BigNumberish,
      deadline: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAddLiquidityStakeETH(
      to: string,
      crucible: string,
      baseAmount: BigNumberish,
      ammRouter: string,
      stake: string,
      salt: BytesLike,
      expiry: BigNumberish,
      deadline: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndStake(
      to: string,
      crucible: string,
      amount: BigNumberish,
      stake: string,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositOpen(
      to: string,
      crucible: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forceRemoveFromQuorum(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      ownerGroupId: BigNumberish,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    openCaps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    overrideFee(
      crucible: string,
      target: string,
      overrideType: BigNumberish,
      newFeeX10000: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    quorumList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    quorumSubscriptions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        id: string;
        groupId: BigNumber;
        minSignatures: number;
        ownerGroupId: number;
      }
    >;

    quorums(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        id: string;
        groupId: BigNumber;
        minSignatures: number;
        ownerGroupId: number;
      }
    >;

    quorumsSubscribers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAmm(amm: string, overrides?: CallOverrides): Promise<void>;

    removeFromQuorum(
      _address: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setOpenCap(
      crucible: string,
      cap: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxDistributor(
      _taxDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeFor(
      to: string,
      token: string,
      stake: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    taxDistributor(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCrucibleFees(
      crucible: string,
      newFeeOnTransferX10000: BigNumberish,
      newFeeOnWithdrawX10000: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinSignature(
      quorumId: string,
      minSignature: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeRouter(
      crucible: string,
      newRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    AddedToQuorum(
      quorumId?: null,
      subscriber?: null
    ): TypedEventFilter<
      [string, string],
      { quorumId: string; subscriber: string }
    >;

    AdminSet(admin?: null): TypedEventFilter<[string], { admin: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    QuorumCreated(
      quorum?: null
    ): TypedEventFilter<
      [
        [string, BigNumber, number, number] & {
          id: string;
          groupId: BigNumber;
          minSignatures: number;
          ownerGroupId: number;
        }
      ],
      {
        quorum: [string, BigNumber, number, number] & {
          id: string;
          groupId: BigNumber;
          minSignatures: number;
          ownerGroupId: number;
        };
      }
    >;

    QuorumUpdated(
      quorum?: null
    ): TypedEventFilter<
      [
        [string, BigNumber, number, number] & {
          id: string;
          groupId: BigNumber;
          minSignatures: number;
          ownerGroupId: number;
        }
      ],
      {
        quorum: [string, BigNumber, number, number] & {
          id: string;
          groupId: BigNumber;
          minSignatures: number;
          ownerGroupId: number;
        };
      }
    >;

    RemovedFromQuorum(
      quorumId?: null,
      subscriber?: null
    ): TypedEventFilter<
      [string, string],
      { quorumId: string; subscriber: string }
    >;
  };

  estimateGas: {
    GOVERNANCE_GROUP_ID_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addToQuorum(
      _address: string,
      quorumId: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allowAmm(
      amm: string,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowedAmms(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelSaltedSignature(
      salt: BytesLike,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateGroupId(
      crucible: string,
      delegatedGroupId: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegatedGroupIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      to: string,
      crucible: string,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositAddLiquidityStake(
      to: string,
      crucible: string,
      pairToken: string,
      baseAmount: BigNumberish,
      pairAmount: BigNumberish,
      ammRouter: string,
      stake: string,
      salt: BytesLike,
      expiry: BigNumberish,
      deadline: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositAddLiquidityStakeETH(
      to: string,
      crucible: string,
      baseAmount: BigNumberish,
      ammRouter: string,
      stake: string,
      salt: BytesLike,
      expiry: BigNumberish,
      deadline: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositAndStake(
      to: string,
      crucible: string,
      amount: BigNumberish,
      stake: string,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositOpen(
      to: string,
      crucible: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceRemoveFromQuorum(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      ownerGroupId: BigNumberish,
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openCaps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    overrideFee(
      crucible: string,
      target: string,
      overrideType: BigNumberish,
      newFeeX10000: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    quorumList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorumSubscriptions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorums(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    quorumsSubscribers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAmm(
      amm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeFromQuorum(
      _address: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOpenCap(
      crucible: string,
      cap: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaxDistributor(
      _taxDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeFor(
      to: string,
      token: string,
      stake: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taxDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCrucibleFees(
      crucible: string,
      newFeeOnTransferX10000: BigNumberish,
      newFeeOnWithdrawX10000: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMinSignature(
      quorumId: string,
      minSignature: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeRouter(
      crucible: string,
      newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    GOVERNANCE_GROUP_ID_MAX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addToQuorum(
      _address: string,
      quorumId: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowAmm(
      amm: string,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowedAmms(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelSaltedSignature(
      salt: BytesLike,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateGroupId(
      crucible: string,
      delegatedGroupId: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegatedGroupIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      to: string,
      crucible: string,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositAddLiquidityStake(
      to: string,
      crucible: string,
      pairToken: string,
      baseAmount: BigNumberish,
      pairAmount: BigNumberish,
      ammRouter: string,
      stake: string,
      salt: BytesLike,
      expiry: BigNumberish,
      deadline: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositAddLiquidityStakeETH(
      to: string,
      crucible: string,
      baseAmount: BigNumberish,
      ammRouter: string,
      stake: string,
      salt: BytesLike,
      expiry: BigNumberish,
      deadline: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositAndStake(
      to: string,
      crucible: string,
      amount: BigNumberish,
      stake: string,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositOpen(
      to: string,
      crucible: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceRemoveFromQuorum(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      ownerGroupId: BigNumberish,
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openCaps(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    overrideFee(
      crucible: string,
      target: string,
      overrideType: BigNumberish,
      newFeeX10000: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quorumList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorumSubscriptions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorums(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorumsSubscribers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAmm(
      amm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeFromQuorum(
      _address: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOpenCap(
      crucible: string,
      cap: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaxDistributor(
      _taxDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeFor(
      to: string,
      token: string,
      stake: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taxDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCrucibleFees(
      crucible: string,
      newFeeOnTransferX10000: BigNumberish,
      newFeeOnWithdrawX10000: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMinSignature(
      quorumId: string,
      minSignature: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeRouter(
      crucible: string,
      newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usedHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
