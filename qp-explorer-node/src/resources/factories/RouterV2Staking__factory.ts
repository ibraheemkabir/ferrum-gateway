/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RouterV2Staking,
  RouterV2StakingInterface,
} from "../RouterV2Staking";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "enum Staking.StakeType",
        name: "sType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "rewardToken",
        type: "address",
      },
    ],
    name: "addReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "openEndedStakeContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "staking",
        type: "address",
      },
    ],
    name: "setOpenEndedStakeContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "staking",
        type: "address",
      },
    ],
    name: "setTimedStakeContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "enum Staking.StakeType",
        name: "sType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "enum Staking.StakeType",
        name: "sType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "allocation",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "allocatorSignature",
        type: "bytes",
      },
    ],
    name: "stakeWithAllocation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "timedStakeContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6111c38061007e6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063af3d905a11610066578063af3d905a14610122578063c10950b014610135578063f2fde38b14610148578063fb6d7c4f1461015b578063fc4284171461016e5761009e565b80632f916b7f146100a357806359007d18146100d35780635f44c99c146100f4578063715018a6146101075780638da5cb5b14610111575b600080fd5b6001546100b6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e66100e1366004610eab565b610181565b6040519081526020016100ca565b6100e6610102366004610fd9565b6103c1565b61010f6104f2565b005b6000546001600160a01b03166100b6565b61010f610130366004610e73565b610528565b61010f610143366004610e73565b610615565b61010f610156366004610e73565b610702565b6002546100b6906001600160a01b031681565b6100e661017c366004610ef9565b61079d565b60006001600160a01b0385166101b25760405162461bcd60e51b81526004016101a99061111e565b60405180910390fd5b6001600160a01b0383166101ff5760405162461bcd60e51b815260206004820152601460248201527314958c94ce881a59081a5cc81c995c5d5a5c995960621b60448201526064016101a9565b816102475760405162461bcd60e51b815260206004820152601860248201527714958c94ce88185b5bdd5b9d081a5cc81c995c5d5a5c995960421b60448201526064016101a9565b6000610252856109dd565b604051631de7d10560e31b81526001600160a01b03868116600483015291925060009183169063ef3e882890602401602060405180830381600087803b15801561029b57600080fd5b505af11580156102af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d39190610e8f565b90506001600160a01b03811661031e5760405162461bcd60e51b815260206004820152601060248201526f14958c94ce881a5b9d985b1a59081a5960821b60448201526064016101a9565b6103336001600160a01b038216338487610b73565b604051632021856b60e21b81526001600160a01b038881166004830152868116602483015283169063808615ac90604401602060405180830381600087803b15801561037e57600080fd5b505af1158015610392573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b69190611029565b979650505050505050565b60006001600160a01b0384166103e95760405162461bcd60e51b81526004016101a99061111e565b6001600160a01b038216600114156104435760405162461bcd60e51b815260206004820152601d60248201527f525632533a20726577617264546f6b656e20697320726571756972656400000060448201526064016101a9565b600061044e866109dd565b90506104656001600160a01b038416338387610b73565b604051636b98fd2360e11b81526001600160a01b038681166004830152848116602483015282169063d731fa4690604401602060405180830381600087803b1580156104b057600080fd5b505af11580156104c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e89190611029565b9695505050505050565b6000546001600160a01b0316331461051c5760405162461bcd60e51b81526004016101a9906110e9565b6105266000610bd3565b565b6000546001600160a01b031633146105525760405162461bcd60e51b81526004016101a9906110e9565b6001546001600160a01b0316156105a65760405162461bcd60e51b815260206004820152601860248201527714958c94ce88185b1c9958591e4818dbdb999a59dd5c995960421b60448201526064016101a9565b6001600160a01b0381166105f35760405162461bcd60e51b815260206004820152601460248201527314958c94ce881cdd185ad9481c995c5d5a5c995960621b60448201526064016101a9565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461063f5760405162461bcd60e51b81526004016101a9906110e9565b6001546001600160a01b0316156106935760405162461bcd60e51b815260206004820152601860248201527714958c94ce88185b1c9958591e4818dbdb999a59dd5c995960421b60448201526064016101a9565b6001600160a01b0381166106e05760405162461bcd60e51b815260206004820152601460248201527314958c94ce881cdd185ad9481c995c5d5a5c995960621b60448201526064016101a9565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461072c5760405162461bcd60e51b81526004016101a9906110e9565b6001600160a01b0381166107915760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101a9565b61079a81610bd3565b50565b60006001600160a01b0389166107c55760405162461bcd60e51b81526004016101a99061111e565b6001600160a01b0387166108125760405162461bcd60e51b815260206004820152601460248201527314958c94ce881a59081a5cc81c995c5d5a5c995960621b60448201526064016101a9565b8561085a5760405162461bcd60e51b815260206004820152601860248201527714958c94ce88185b5bdd5b9d081a5cc81c995c5d5a5c995960421b60448201526064016101a9565b6000610865896109dd565b604051631de7d10560e31b81526001600160a01b038a8116600483015291925060009183169063ef3e882890602401602060405180830381600087803b1580156108ae57600080fd5b505af11580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e69190610e8f565b90506001600160a01b0381166109315760405162461bcd60e51b815260206004820152601060248201526f14958c94ce881a5b9d985b1a59081a5960821b60448201526064016101a9565b6109466001600160a01b03821633848b610b73565b604051635972407f60e11b81526001600160a01b0383169063b2e480fe9061097c908e908d908c908c908c908c9060040161105d565b602060405180830381600087803b15801561099657600080fd5b505af11580156109aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ce9190611029565b9b9a5050505050505050505050565b600080826004811115610a0057634e487b7160e01b600052602160045260246000fd5b14158015610a2e57506001826004811115610a2b57634e487b7160e01b600052602160045260246000fd5b14155b610a735760405162461bcd60e51b8152602060048201526016602482015275525632533a20426164207374616b696e67207479706560501b60448201526064016101a9565b60006002836004811115610a9757634e487b7160e01b600052602160045260246000fd5b1480610ac257506004836004811115610ac057634e487b7160e01b600052602160045260246000fd5b145b610b06576003836004811115610ae857634e487b7160e01b600052602160045260246000fd5b14610af4576000610b01565b6002546001600160a01b03165b610b13565b6001546001600160a01b03165b90506001600160a01b038116610b6b5760405162461bcd60e51b815260206004820152601c60248201527f525632533a207374616b656b207479706520697320696e76616c69640000000060448201526064016101a9565b90505b919050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610bcd908590610c23565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610c78826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610cfa9092919063ffffffff16565b805190915015610cf55780806020019051810190610c969190610fb9565b610cf55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101a9565b505050565b6060610d098484600085610d13565b90505b9392505050565b606082471015610d745760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101a9565b843b610dc25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101a9565b600080866001600160a01b03168587604051610dde9190611041565b60006040518083038185875af1925050503d8060008114610e1b576040519150601f19603f3d011682016040523d82523d6000602084013e610e20565b606091505b50915091506103b682828660608315610e3a575081610d0c565b825115610e4a5782518084602001fd5b8160405162461bcd60e51b81526004016101a991906110b6565b803560058110610b6e57600080fd5b600060208284031215610e84578081fd5b8135610d0c81611178565b600060208284031215610ea0578081fd5b8151610d0c81611178565b60008060008060808587031215610ec0578283fd5b8435610ecb81611178565b9350610ed960208601610e64565b92506040850135610ee981611178565b9396929550929360600135925050565b60008060008060008060008060e0898b031215610f14578384fd5b8835610f1f81611178565b9750610f2d60208a01610e64565b96506040890135610f3d81611178565b9550606089013594506080890135935060a0890135925060c089013567ffffffffffffffff80821115610f6e578384fd5b818b0191508b601f830112610f81578384fd5b813581811115610f8f578485fd5b8c6020828501011115610fa0578485fd5b6020830194508093505050509295985092959890939650565b600060208284031215610fca578081fd5b81518015158114610d0c578182fd5b60008060008060808587031215610fee578384fd5b610ff785610e64565b9350602085013561100781611178565b925060408501359150606085013561101e81611178565b939692955090935050565b60006020828403121561103a578081fd5b5051919050565b6000825161105381846020870161114c565b9190910192915050565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c084013781830160c090810191909152601f909201601f1916010195945050505050565b60006020825282518060208401526110d581604085016020870161114c565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526014908201527314958c94ce881d1bc81a5cc81c995c5d5a5c995960621b604082015260600190565b60005b8381101561116757818101518382015260200161114f565b83811115610bcd5750506000910152565b6001600160a01b038116811461079a57600080fdfea2646970667358221220d51c737b42d8ee0993b25140064907ab192e8c3be7c783035faff8b33d86001164736f6c63430008020033";

export class RouterV2Staking__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RouterV2Staking> {
    return super.deploy(overrides || {}) as Promise<RouterV2Staking>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RouterV2Staking {
    return super.attach(address) as RouterV2Staking;
  }
  connect(signer: Signer): RouterV2Staking__factory {
    return super.connect(signer) as RouterV2Staking__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RouterV2StakingInterface {
    return new utils.Interface(_abi) as RouterV2StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RouterV2Staking {
    return new Contract(address, _abi, signerOrProvider) as RouterV2Staking;
  }
}
