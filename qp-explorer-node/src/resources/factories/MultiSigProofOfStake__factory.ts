/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  MultiSigProofOfStake,
  MultiSigProofOfStakeInterface,
} from "../MultiSigProofOfStake";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "quorumId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "subscriber",
        type: "address",
      },
    ],
    name: "AddedToQuorum",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    name: "AdminSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "id",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "groupId",
            type: "uint64",
          },
          {
            internalType: "uint16",
            name: "minSignatures",
            type: "uint16",
          },
          {
            internalType: "uint8",
            name: "ownerGroupId",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct MultiSigCheckable.Quorum",
        name: "quorum",
        type: "tuple",
      },
    ],
    name: "QuorumCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "id",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "groupId",
            type: "uint64",
          },
          {
            internalType: "uint16",
            name: "minSignatures",
            type: "uint16",
          },
          {
            internalType: "uint8",
            name: "ownerGroupId",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct MultiSigCheckable.Quorum",
        name: "quorum",
        type: "tuple",
      },
    ],
    name: "QuorumUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "quorumId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "subscriber",
        type: "address",
      },
    ],
    name: "RemovedFromQuorum",
    type: "event",
  },
  {
    inputs: [],
    name: "GOVERNANCE_GROUP_ID_MAX",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "address",
        name: "quorumId",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "expiry",
        type: "uint64",
      },
      {
        internalType: "bytes",
        name: "multiSignature",
        type: "bytes",
      },
    ],
    name: "addToQuorum",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "expectedGroupId",
        type: "uint64",
      },
      {
        internalType: "bytes",
        name: "multiSignature",
        type: "bytes",
      },
    ],
    name: "cancelSaltedSignature",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "forceRemoveFromQuorum",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "freeze",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "quorumId",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "groupId",
        type: "uint64",
      },
      {
        internalType: "uint16",
        name: "minSignatures",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "ownerGroupId",
        type: "uint8",
      },
      {
        internalType: "address[]",
        name: "addresses",
        type: "address[]",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "quorumList",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "quorumSubscriptions",
    outputs: [
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "groupId",
        type: "uint64",
      },
      {
        internalType: "uint16",
        name: "minSignatures",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "ownerGroupId",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "quorums",
    outputs: [
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "groupId",
        type: "uint64",
      },
      {
        internalType: "uint16",
        name: "minSignatures",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "ownerGroupId",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "quorumsSubscribers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "expiry",
        type: "uint64",
      },
      {
        internalType: "bytes",
        name: "multiSignature",
        type: "bytes",
      },
    ],
    name: "removeFromQuorum",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
    ],
    name: "setAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakingContract",
        type: "address",
      },
      {
        internalType: "address",
        name: "_stakedToken",
        type: "address",
      },
    ],
    name: "setStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakedToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "staking",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "quorumId",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "minSignature",
        type: "uint16",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "expiry",
        type: "uint64",
      },
      {
        internalType: "bytes",
        name: "multiSignature",
        type: "bytes",
      },
    ],
    name: "updateMinSignature",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "usedHashes",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class MultiSigProofOfStake__factory {
  static readonly abi = _abi;
  static createInterface(): MultiSigProofOfStakeInterface {
    return new utils.Interface(_abi) as MultiSigProofOfStakeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiSigProofOfStake {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MultiSigProofOfStake;
  }
}
