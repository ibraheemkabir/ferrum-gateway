/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FestakedWithRewardInterface extends ethers.utils.Interface {
  functions: {
    "addMarginalReward(uint256)": FunctionFragment;
    "addReward(uint256,uint256)": FunctionFragment;
    "earlyWithdrawReward()": FunctionFragment;
    "name()": FunctionFragment;
    "rewardBalance()": FunctionFragment;
    "rewardSetter()": FunctionFragment;
    "rewardState()": FunctionFragment;
    "rewardTokenAddress()": FunctionFragment;
    "rewardsTotal()": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeFor(address,uint256)": FunctionFragment;
    "stakeOf(address)": FunctionFragment;
    "stakeState()": FunctionFragment;
    "stakedBalance()": FunctionFragment;
    "stakedTotal()": FunctionFragment;
    "stakingCap()": FunctionFragment;
    "stakingEnds()": FunctionFragment;
    "stakingStarts()": FunctionFragment;
    "tokenAddress()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawEnds()": FunctionFragment;
    "withdrawStarts()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMarginalReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earlyWithdrawReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSetter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsTotal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stakeOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakeState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakedTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingEnds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingStarts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEnds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStarts",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addMarginalReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "earlyWithdrawReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakingCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingEnds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingStarts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEnds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStarts",
    data: BytesLike
  ): Result;

  events: {
    "Staked(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
}

export class FestakedWithReward extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FestakedWithRewardInterface;

  functions: {
    addMarginalReward(
      withdrawableAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addReward(
      rewardAmount: BigNumberish,
      withdrawableAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    earlyWithdrawReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    rewardBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardSetter(overrides?: CallOverrides): Promise<[string]>;

    rewardState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rewardBalance: BigNumber;
        rewardsTotal: BigNumber;
        earlyWithdrawReward: BigNumber;
      }
    >;

    rewardTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    rewardsTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeFor(
      staker: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    stakeState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        stakedTotal: BigNumber;
        stakingCap: BigNumber;
        stakedBalance: BigNumber;
        withdrawnEarly: BigNumber;
      }
    >;

    stakedBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakedTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingEnds(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingStarts(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenAddress(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEnds(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawStarts(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addMarginalReward(
    withdrawableAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addReward(
    rewardAmount: BigNumberish,
    withdrawableAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  earlyWithdrawReward(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  rewardBalance(overrides?: CallOverrides): Promise<BigNumber>;

  rewardSetter(overrides?: CallOverrides): Promise<string>;

  rewardState(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      rewardBalance: BigNumber;
      rewardsTotal: BigNumber;
      earlyWithdrawReward: BigNumber;
    }
  >;

  rewardTokenAddress(overrides?: CallOverrides): Promise<string>;

  rewardsTotal(overrides?: CallOverrides): Promise<BigNumber>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeFor(
    staker: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  stakeState(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      stakedTotal: BigNumber;
      stakingCap: BigNumber;
      stakedBalance: BigNumber;
      withdrawnEarly: BigNumber;
    }
  >;

  stakedBalance(overrides?: CallOverrides): Promise<BigNumber>;

  stakedTotal(overrides?: CallOverrides): Promise<BigNumber>;

  stakingCap(overrides?: CallOverrides): Promise<BigNumber>;

  stakingEnds(overrides?: CallOverrides): Promise<BigNumber>;

  stakingStarts(overrides?: CallOverrides): Promise<BigNumber>;

  tokenAddress(overrides?: CallOverrides): Promise<string>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEnds(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawStarts(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addMarginalReward(
      withdrawableAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addReward(
      rewardAmount: BigNumberish,
      withdrawableAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    earlyWithdrawReward(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    rewardBalance(overrides?: CallOverrides): Promise<BigNumber>;

    rewardSetter(overrides?: CallOverrides): Promise<string>;

    rewardState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rewardBalance: BigNumber;
        rewardsTotal: BigNumber;
        earlyWithdrawReward: BigNumber;
      }
    >;

    rewardTokenAddress(overrides?: CallOverrides): Promise<string>;

    rewardsTotal(overrides?: CallOverrides): Promise<BigNumber>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    stakeFor(
      staker: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stakeOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakeState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        stakedTotal: BigNumber;
        stakingCap: BigNumber;
        stakedBalance: BigNumber;
        withdrawnEarly: BigNumber;
      }
    >;

    stakedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    stakedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    stakingCap(overrides?: CallOverrides): Promise<BigNumber>;

    stakingEnds(overrides?: CallOverrides): Promise<BigNumber>;

    stakingStarts(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<string>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    withdrawEnds(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawStarts(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Staked(
      token?: string | null,
      staker_?: string | null,
      requestedAmount_?: null,
      stakedAmount_?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        token: string;
        staker_: string;
        requestedAmount_: BigNumber;
        stakedAmount_: BigNumber;
      }
    >;
  };

  estimateGas: {
    addMarginalReward(
      withdrawableAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addReward(
      rewardAmount: BigNumberish,
      withdrawableAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    earlyWithdrawReward(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    rewardBalance(overrides?: CallOverrides): Promise<BigNumber>;

    rewardSetter(overrides?: CallOverrides): Promise<BigNumber>;

    rewardState(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsTotal(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeFor(
      staker: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakeState(overrides?: CallOverrides): Promise<BigNumber>;

    stakedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    stakedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    stakingCap(overrides?: CallOverrides): Promise<BigNumber>;

    stakingEnds(overrides?: CallOverrides): Promise<BigNumber>;

    stakingStarts(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEnds(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawStarts(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addMarginalReward(
      withdrawableAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addReward(
      rewardAmount: BigNumberish,
      withdrawableAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    earlyWithdrawReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardSetter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeFor(
      staker: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakedBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakedTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingEnds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingStarts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEnds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawStarts(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
