/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PlaygroundInterface extends ethers.utils.Interface {
  functions: {
    "blockIdx(uint64,uint64)": FunctionFragment;
    "log()": FunctionFragment;
    "testMultiSig(bytes,bytes32[],bytes32[],uint8[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "blockIdx",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "log", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testMultiSig",
    values: [BytesLike, BytesLike[], BytesLike[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "blockIdx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "log", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testMultiSig",
    data: BytesLike
  ): Result;

  events: {};
}

export class Playground extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PlaygroundInterface;

  functions: {
    blockIdx(
      chainId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    log(overrides?: CallOverrides): Promise<[void]>;

    testMultiSig(
      multiSig: BytesLike,
      rs: BytesLike[],
      ss: BytesLike[],
      vs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [([number, string, string] & { v: number; r: string; s: string })[]] & {
        sigs: ([number, string, string] & {
          v: number;
          r: string;
          s: string;
        })[];
      }
    >;
  };

  blockIdx(
    chainId: BigNumberish,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  log(overrides?: CallOverrides): Promise<void>;

  testMultiSig(
    multiSig: BytesLike,
    rs: BytesLike[],
    ss: BytesLike[],
    vs: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([number, string, string] & { v: number; r: string; s: string })[]
  >;

  callStatic: {
    blockIdx(
      chainId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    log(overrides?: CallOverrides): Promise<void>;

    testMultiSig(
      multiSig: BytesLike,
      rs: BytesLike[],
      ss: BytesLike[],
      vs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([number, string, string] & { v: number; r: string; s: string })[]
    >;
  };

  filters: {};

  estimateGas: {
    blockIdx(
      chainId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    log(overrides?: CallOverrides): Promise<BigNumber>;

    testMultiSig(
      multiSig: BytesLike,
      rs: BytesLike[],
      ss: BytesLike[],
      vs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blockIdx(
      chainId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    log(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testMultiSig(
      multiSig: BytesLike,
      rs: BytesLike[],
      ss: BytesLike[],
      vs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
