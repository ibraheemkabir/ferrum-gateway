/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CruicibleRouterInterface extends ethers.utils.Interface {
  functions: {
    "GOVERNANCE_GROUP_ID()": FunctionFragment;
    "addToQuorum(address,address,uint16,uint16)": FunctionFragment;
    "addToQuorumGovernance(address,address,uint16,uint16,bytes32,bytes)": FunctionFragment;
    "admin()": FunctionFragment;
    "burn(address)": FunctionFragment;
    "cancelSaltedSignature(bytes32,uint16,bytes)": FunctionFragment;
    "createCrucible(address,uint64,uint64)": FunctionFragment;
    "createCrucibleDirect(address,string,string,uint64,uint64)": FunctionFragment;
    "deposit(address,address,uint256,bytes32,uint64,bytes)": FunctionFragment;
    "depositAddLiquidityStake(address,address,address,uint256,uint256,address,address,uint64,uint256,bytes)": FunctionFragment;
    "depositAddLiquidityStakeETH(address,address,uint256,address,address,uint64,uint64,bytes)": FunctionFragment;
    "depositOpen(address,address,uint256)": FunctionFragment;
    "getCrucible(address,uint64,uint64)": FunctionFragment;
    "openCaps(address)": FunctionFragment;
    "overrideFee(address,address,uint8,uint64,uint64,uint16,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "parameters()": FunctionFragment;
    "quorumList(uint256)": FunctionFragment;
    "quorumSubscriptions(address)": FunctionFragment;
    "quorums(address)": FunctionFragment;
    "removeFromQuorum(address)": FunctionFragment;
    "removeFromQuorumGovernance(address,bytes32,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setOpenCap(address,uint256,uint64,uint16,bytes)": FunctionFragment;
    "setTaxDistributor(address)": FunctionFragment;
    "taxDistributor()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usedHashes(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "GOVERNANCE_GROUP_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToQuorum",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToQuorumGovernance",
    values: [string, string, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "burn", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancelSaltedSignature",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createCrucible",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCrucibleDirect",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, string, BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAddLiquidityStake",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAddLiquidityStakeETH",
    values: [
      string,
      string,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOpen",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCrucible",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "openCaps", values: [string]): string;
  encodeFunctionData(
    functionFragment: "overrideFee",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quorumList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumSubscriptions",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "quorums", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeFromQuorum",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromQuorumGovernance",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOpenCap",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxDistributor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "taxDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "usedHashes",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "GOVERNANCE_GROUP_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToQuorumGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelSaltedSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCrucible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCrucibleDirect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAddLiquidityStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAddLiquidityStakeETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCrucible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openCaps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "overrideFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parameters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quorumList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quorums", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromQuorumGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOpenCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTaxDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedHashes", data: BytesLike): Result;

  events: {
    "AdminSet(address)": EventFragment;
    "CrucibleCreated(address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrucibleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class CruicibleRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CruicibleRouterInterface;

  functions: {
    GOVERNANCE_GROUP_ID(overrides?: CallOverrides): Promise<[number]>;

    addToQuorum(
      _address: string,
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToQuorumGovernance(
      _address: string,
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    burn(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelSaltedSignature(
      salt: BytesLike,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createCrucible(
      baseToken: string,
      feeOnTransferX10000: BigNumberish,
      feeOnWithdrawX10000: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createCrucibleDirect(
      baseToken: string,
      name: string,
      symbol: string,
      feeOnTransferX10000: BigNumberish,
      feeOnWithdrawX10000: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      to: string,
      crucible: string,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositAddLiquidityStake(
      to: string,
      crucible: string,
      pairToken: string,
      baseAmount: BigNumberish,
      pairAmount: BigNumberish,
      ammRouter: string,
      stake: string,
      expiry: BigNumberish,
      deadline: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositAddLiquidityStakeETH(
      to: string,
      crucible: string,
      baseAmount: BigNumberish,
      ammRouter: string,
      stake: string,
      expiry: BigNumberish,
      deadline: BigNumberish,
      multiSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositOpen(
      to: string,
      crucible: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCrucible(
      baseToken: string,
      feeOnTransferX10000: BigNumberish,
      feeOnWithdrawX10000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    openCaps(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    overrideFee(
      crucible: string,
      target: string,
      overrideType: BigNumberish,
      newFeeX10000: BigNumberish,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    parameters(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, string, string] & {
        factory: string;
        baseToken: string;
        feeOnTransferX10000: BigNumber;
        feeOnWithdrawX10000: BigNumber;
        name: string;
        symbol: string;
      }
    >;

    quorumList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    quorumSubscriptions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        id: string;
        groupId: number;
        minSignatures: number;
      }
    >;

    quorums(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        id: string;
        groupId: number;
        minSignatures: number;
      }
    >;

    removeFromQuorum(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeFromQuorumGovernance(
      _address: string,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOpenCap(
      crucible: string,
      cap: BigNumberish,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaxDistributor(
      _taxDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taxDistributor(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
  };

  GOVERNANCE_GROUP_ID(overrides?: CallOverrides): Promise<number>;

  addToQuorum(
    _address: string,
    quorumId: string,
    groupId: BigNumberish,
    minSignatures: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToQuorumGovernance(
    _address: string,
    quorumId: string,
    groupId: BigNumberish,
    minSignatures: BigNumberish,
    salt: BytesLike,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  burn(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelSaltedSignature(
    salt: BytesLike,
    expectedGroupId: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createCrucible(
    baseToken: string,
    feeOnTransferX10000: BigNumberish,
    feeOnWithdrawX10000: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createCrucibleDirect(
    baseToken: string,
    name: string,
    symbol: string,
    feeOnTransferX10000: BigNumberish,
    feeOnWithdrawX10000: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    to: string,
    crucible: string,
    amount: BigNumberish,
    salt: BytesLike,
    expiry: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositAddLiquidityStake(
    to: string,
    crucible: string,
    pairToken: string,
    baseAmount: BigNumberish,
    pairAmount: BigNumberish,
    ammRouter: string,
    stake: string,
    expiry: BigNumberish,
    deadline: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositAddLiquidityStakeETH(
    to: string,
    crucible: string,
    baseAmount: BigNumberish,
    ammRouter: string,
    stake: string,
    expiry: BigNumberish,
    deadline: BigNumberish,
    multiSignature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositOpen(
    to: string,
    crucible: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCrucible(
    baseToken: string,
    feeOnTransferX10000: BigNumberish,
    feeOnWithdrawX10000: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  openCaps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  overrideFee(
    crucible: string,
    target: string,
    overrideType: BigNumberish,
    newFeeX10000: BigNumberish,
    expiry: BigNumberish,
    expectedGroupId: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  parameters(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, string, string] & {
      factory: string;
      baseToken: string;
      feeOnTransferX10000: BigNumber;
      feeOnWithdrawX10000: BigNumber;
      name: string;
      symbol: string;
    }
  >;

  quorumList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  quorumSubscriptions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number] & {
      id: string;
      groupId: number;
      minSignatures: number;
    }
  >;

  quorums(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number] & {
      id: string;
      groupId: number;
      minSignatures: number;
    }
  >;

  removeFromQuorum(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeFromQuorumGovernance(
    _address: string,
    salt: BytesLike,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOpenCap(
    crucible: string,
    cap: BigNumberish,
    expiry: BigNumberish,
    expectedGroupId: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaxDistributor(
    _taxDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taxDistributor(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    GOVERNANCE_GROUP_ID(overrides?: CallOverrides): Promise<number>;

    addToQuorum(
      _address: string,
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addToQuorumGovernance(
      _address: string,
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    burn(token: string, overrides?: CallOverrides): Promise<void>;

    cancelSaltedSignature(
      salt: BytesLike,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createCrucible(
      baseToken: string,
      feeOnTransferX10000: BigNumberish,
      feeOnWithdrawX10000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createCrucibleDirect(
      baseToken: string,
      name: string,
      symbol: string,
      feeOnTransferX10000: BigNumberish,
      feeOnWithdrawX10000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deposit(
      to: string,
      crucible: string,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositAddLiquidityStake(
      to: string,
      crucible: string,
      pairToken: string,
      baseAmount: BigNumberish,
      pairAmount: BigNumberish,
      ammRouter: string,
      stake: string,
      expiry: BigNumberish,
      deadline: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAddLiquidityStakeETH(
      to: string,
      crucible: string,
      baseAmount: BigNumberish,
      ammRouter: string,
      stake: string,
      expiry: BigNumberish,
      deadline: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositOpen(
      to: string,
      crucible: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCrucible(
      baseToken: string,
      feeOnTransferX10000: BigNumberish,
      feeOnWithdrawX10000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    openCaps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    overrideFee(
      crucible: string,
      target: string,
      overrideType: BigNumberish,
      newFeeX10000: BigNumberish,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    parameters(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, string, string] & {
        factory: string;
        baseToken: string;
        feeOnTransferX10000: BigNumber;
        feeOnWithdrawX10000: BigNumber;
        name: string;
        symbol: string;
      }
    >;

    quorumList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    quorumSubscriptions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        id: string;
        groupId: number;
        minSignatures: number;
      }
    >;

    quorums(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        id: string;
        groupId: number;
        minSignatures: number;
      }
    >;

    removeFromQuorum(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromQuorumGovernance(
      _address: string,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setOpenCap(
      crucible: string,
      cap: BigNumberish,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxDistributor(
      _taxDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    taxDistributor(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    AdminSet(admin?: null): TypedEventFilter<[string], { admin: string }>;

    CrucibleCreated(
      token?: null,
      baseToken?: null,
      feeOnTransferX10000?: null,
      feeOnWithdrawX10000?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        token: string;
        baseToken: string;
        feeOnTransferX10000: BigNumber;
        feeOnWithdrawX10000: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    GOVERNANCE_GROUP_ID(overrides?: CallOverrides): Promise<BigNumber>;

    addToQuorum(
      _address: string,
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToQuorumGovernance(
      _address: string,
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelSaltedSignature(
      salt: BytesLike,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createCrucible(
      baseToken: string,
      feeOnTransferX10000: BigNumberish,
      feeOnWithdrawX10000: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createCrucibleDirect(
      baseToken: string,
      name: string,
      symbol: string,
      feeOnTransferX10000: BigNumberish,
      feeOnWithdrawX10000: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      to: string,
      crucible: string,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositAddLiquidityStake(
      to: string,
      crucible: string,
      pairToken: string,
      baseAmount: BigNumberish,
      pairAmount: BigNumberish,
      ammRouter: string,
      stake: string,
      expiry: BigNumberish,
      deadline: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositAddLiquidityStakeETH(
      to: string,
      crucible: string,
      baseAmount: BigNumberish,
      ammRouter: string,
      stake: string,
      expiry: BigNumberish,
      deadline: BigNumberish,
      multiSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositOpen(
      to: string,
      crucible: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCrucible(
      baseToken: string,
      feeOnTransferX10000: BigNumberish,
      feeOnWithdrawX10000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openCaps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    overrideFee(
      crucible: string,
      target: string,
      overrideType: BigNumberish,
      newFeeX10000: BigNumberish,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    parameters(overrides?: CallOverrides): Promise<BigNumber>;

    quorumList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorumSubscriptions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorums(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeFromQuorum(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeFromQuorumGovernance(
      _address: string,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOpenCap(
      crucible: string,
      cap: BigNumberish,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaxDistributor(
      _taxDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taxDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    GOVERNANCE_GROUP_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addToQuorum(
      _address: string,
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToQuorumGovernance(
      _address: string,
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelSaltedSignature(
      salt: BytesLike,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createCrucible(
      baseToken: string,
      feeOnTransferX10000: BigNumberish,
      feeOnWithdrawX10000: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createCrucibleDirect(
      baseToken: string,
      name: string,
      symbol: string,
      feeOnTransferX10000: BigNumberish,
      feeOnWithdrawX10000: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      to: string,
      crucible: string,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositAddLiquidityStake(
      to: string,
      crucible: string,
      pairToken: string,
      baseAmount: BigNumberish,
      pairAmount: BigNumberish,
      ammRouter: string,
      stake: string,
      expiry: BigNumberish,
      deadline: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositAddLiquidityStakeETH(
      to: string,
      crucible: string,
      baseAmount: BigNumberish,
      ammRouter: string,
      stake: string,
      expiry: BigNumberish,
      deadline: BigNumberish,
      multiSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositOpen(
      to: string,
      crucible: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCrucible(
      baseToken: string,
      feeOnTransferX10000: BigNumberish,
      feeOnWithdrawX10000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openCaps(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    overrideFee(
      crucible: string,
      target: string,
      overrideType: BigNumberish,
      newFeeX10000: BigNumberish,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quorumList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorumSubscriptions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorums(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFromQuorum(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeFromQuorumGovernance(
      _address: string,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOpenCap(
      crucible: string,
      cap: BigNumberish,
      expiry: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaxDistributor(
      _taxDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taxDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usedHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
