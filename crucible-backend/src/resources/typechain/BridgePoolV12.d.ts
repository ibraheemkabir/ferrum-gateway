/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BridgePoolV12Interface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_FEE_X10000()": FunctionFragment;
    "GOVERNANCE_GROUP_ID_MAX()": FunctionFragment;
    "NAME()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "addLiquidity(address,address)": FunctionFragment;
    "addToQuorum(address,address,bytes32,uint64,bytes)": FunctionFragment;
    "admin()": FunctionFragment;
    "cancelSaltedSignature(bytes32,uint64,bytes)": FunctionFragment;
    "feeDistributor()": FunctionFragment;
    "forceRemoveFromQuorum(address)": FunctionFragment;
    "initialize(address,uint64,uint16,uint8,address[])": FunctionFragment;
    "inventory(address)": FunctionFragment;
    "liquidity(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "quorumList(uint256)": FunctionFragment;
    "quorumSubscriptions(address)": FunctionFragment;
    "quorums(address)": FunctionFragment;
    "quorumsSubscribers(address)": FunctionFragment;
    "receiveTokenFrom(address,address,uint256)": FunctionFragment;
    "removeFromQuorum(address,bytes32,uint64,bytes)": FunctionFragment;
    "removeLiquidity(address,address,uint256,uint256,address)": FunctionFragment;
    "removeLiquidityIfPossible(address,address,uint256)": FunctionFragment;
    "removeLiquiditySigned(address,address,uint256,uint32,bytes32,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "routingTable()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setFeeDistributor(address)": FunctionFragment;
    "setRouter(address)": FunctionFragment;
    "setRoutingTable(address)": FunctionFragment;
    "swap(address,address,uint256,address,address,address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateMinSignature(address,uint16,bytes32,uint64,bytes)": FunctionFragment;
    "usedHashes(bytes32)": FunctionFragment;
    "withdrawSigned(address,address,uint256,address,uint32,bytes32,bytes)": FunctionFragment;
    "withdrawSignedVerify(address,address,uint256,address,uint32,bytes32,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_FEE_X10000",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOVERNANCE_GROUP_ID_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addToQuorum",
    values: [string, string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelSaltedSignature",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceRemoveFromQuorum",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(functionFragment: "inventory", values: [string]): string;
  encodeFunctionData(
    functionFragment: "liquidity",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quorumList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumSubscriptions",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "quorums", values: [string]): string;
  encodeFunctionData(
    functionFragment: "quorumsSubscribers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveTokenFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromQuorum",
    values: [string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityIfPossible",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquiditySigned",
    values: [string, string, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "routingTable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFeeDistributor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setRouter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRoutingTable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, string, BigNumberish, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinSignature",
    values: [string, BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usedHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSigned",
    values: [
      string,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSignedVerify",
    values: [
      string,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_FEE_X10000",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOVERNANCE_GROUP_ID_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelSaltedSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceRemoveFromQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inventory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quorumList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quorums", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumsSubscribers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveTokenFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityIfPossible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquiditySigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "routingTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRoutingTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedHashes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSignedVerify",
    data: BytesLike
  ): Result;

  events: {
    "AddedToQuorum(address,address)": EventFragment;
    "AdminSet(address)": EventFragment;
    "BridgeLiquidityAdded(address,address,uint256)": EventFragment;
    "BridgeLiquidityRemoved(address,address,uint256,uint256,address,uint256)": EventFragment;
    "BridgeSwap(address,address,address,uint256,address,address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "QuorumCreated(tuple)": EventFragment;
    "QuorumUpdated(tuple)": EventFragment;
    "RemovedFromQuorum(address,address)": EventFragment;
    "TransferBySignature(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedToQuorum"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeLiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeLiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedFromQuorum"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBySignature"): EventFragment;
}

export class BridgePoolV12 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BridgePoolV12Interface;

  functions: {
    DEFAULT_FEE_X10000(overrides?: CallOverrides): Promise<[BigNumber]>;

    GOVERNANCE_GROUP_ID_MAX(overrides?: CallOverrides): Promise<[number]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    addLiquidity(
      to: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToQuorum(
      _address: string,
      quorumId: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    cancelSaltedSignature(
      salt: BytesLike,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeDistributor(overrides?: CallOverrides): Promise<[string]>;

    forceRemoveFromQuorum(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      ownerGroupId: BigNumberish,
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    inventory(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidity(
      token: string,
      liquidityAdder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    quorumList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    quorumSubscriptions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        id: string;
        groupId: BigNumber;
        minSignatures: number;
        ownerGroupId: number;
      }
    >;

    quorums(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        id: string;
        groupId: BigNumber;
        minSignatures: number;
        ownerGroupId: number;
      }
    >;

    quorumsSubscribers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    receiveTokenFrom(
      token: string,
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeFromQuorum(
      _address: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      to: string,
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityIfPossible(
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquiditySigned(
      token: string,
      payee: string,
      amount: BigNumberish,
      sourceChainId: BigNumberish,
      txId: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    routingTable(overrides?: CallOverrides): Promise<[string]>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeDistributor(
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoutingTable(
      _routingTable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      to: string,
      token: string,
      targetNetwork: BigNumberish,
      targetToken: string,
      swapTargetTokenTo: string,
      targetAddress: string,
      originToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMinSignature(
      quorumId: string,
      minSignature: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    withdrawSigned(
      token: string,
      payee: string,
      amount: BigNumberish,
      swapToToken: string,
      sourceChainId: BigNumberish,
      swapTxId: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawSignedVerify(
      token: string,
      payee: string,
      amount: BigNumberish,
      swapToToken: string,
      sourceChainId: BigNumberish,
      swapTxId: BytesLike,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;
  };

  DEFAULT_FEE_X10000(overrides?: CallOverrides): Promise<BigNumber>;

  GOVERNANCE_GROUP_ID_MAX(overrides?: CallOverrides): Promise<number>;

  NAME(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  addLiquidity(
    to: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToQuorum(
    _address: string,
    quorumId: string,
    salt: BytesLike,
    expiry: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  cancelSaltedSignature(
    salt: BytesLike,
    expectedGroupId: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeDistributor(overrides?: CallOverrides): Promise<string>;

  forceRemoveFromQuorum(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    quorumId: string,
    groupId: BigNumberish,
    minSignatures: BigNumberish,
    ownerGroupId: BigNumberish,
    addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  inventory(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  liquidity(
    token: string,
    liquidityAdder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  quorumList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  quorumSubscriptions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, number] & {
      id: string;
      groupId: BigNumber;
      minSignatures: number;
      ownerGroupId: number;
    }
  >;

  quorums(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, number] & {
      id: string;
      groupId: BigNumber;
      minSignatures: number;
      ownerGroupId: number;
    }
  >;

  quorumsSubscribers(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  receiveTokenFrom(
    token: string,
    from: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeFromQuorum(
    _address: string,
    salt: BytesLike,
    expiry: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    to: string,
    token: string,
    amount: BigNumberish,
    targetNetwork: BigNumberish,
    targetToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityIfPossible(
    to: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquiditySigned(
    token: string,
    payee: string,
    amount: BigNumberish,
    sourceChainId: BigNumberish,
    txId: BytesLike,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  routingTable(overrides?: CallOverrides): Promise<string>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeDistributor(
    _feeDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRouter(
    _router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoutingTable(
    _routingTable: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    to: string,
    token: string,
    targetNetwork: BigNumberish,
    targetToken: string,
    swapTargetTokenTo: string,
    targetAddress: string,
    originToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMinSignature(
    quorumId: string,
    minSignature: BigNumberish,
    salt: BytesLike,
    expiry: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  withdrawSigned(
    token: string,
    payee: string,
    amount: BigNumberish,
    swapToToken: string,
    sourceChainId: BigNumberish,
    swapTxId: BytesLike,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawSignedVerify(
    token: string,
    payee: string,
    amount: BigNumberish,
    swapToToken: string,
    sourceChainId: BigNumberish,
    swapTxId: BytesLike,
    multiSignature: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, boolean]>;

  callStatic: {
    DEFAULT_FEE_X10000(overrides?: CallOverrides): Promise<BigNumber>;

    GOVERNANCE_GROUP_ID_MAX(overrides?: CallOverrides): Promise<number>;

    NAME(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    addLiquidity(
      to: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addToQuorum(
      _address: string,
      quorumId: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    cancelSaltedSignature(
      salt: BytesLike,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    feeDistributor(overrides?: CallOverrides): Promise<string>;

    forceRemoveFromQuorum(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      ownerGroupId: BigNumberish,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    inventory(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidity(
      token: string,
      liquidityAdder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    quorumList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    quorumSubscriptions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        id: string;
        groupId: BigNumber;
        minSignatures: number;
        ownerGroupId: number;
      }
    >;

    quorums(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        id: string;
        groupId: BigNumber;
        minSignatures: number;
        ownerGroupId: number;
      }
    >;

    quorumsSubscribers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveTokenFrom(
      token: string,
      from: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromQuorum(
      _address: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidity(
      to: string,
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityIfPossible(
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquiditySigned(
      token: string,
      payee: string,
      amount: BigNumberish,
      sourceChainId: BigNumberish,
      txId: BytesLike,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    routingTable(overrides?: CallOverrides): Promise<string>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setFeeDistributor(
      _feeDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouter(_router: string, overrides?: CallOverrides): Promise<void>;

    setRoutingTable(
      _routingTable: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      to: string,
      token: string,
      targetNetwork: BigNumberish,
      targetToken: string,
      swapTargetTokenTo: string,
      targetAddress: string,
      originToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinSignature(
      quorumId: string,
      minSignature: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    withdrawSigned(
      token: string,
      payee: string,
      amount: BigNumberish,
      swapToToken: string,
      sourceChainId: BigNumberish,
      swapTxId: BytesLike,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawSignedVerify(
      token: string,
      payee: string,
      amount: BigNumberish,
      swapToToken: string,
      sourceChainId: BigNumberish,
      swapTxId: BytesLike,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;
  };

  filters: {
    AddedToQuorum(
      quorumId?: null,
      subscriber?: null
    ): TypedEventFilter<
      [string, string],
      { quorumId: string; subscriber: string }
    >;

    AdminSet(admin?: null): TypedEventFilter<[string], { admin: string }>;

    BridgeLiquidityAdded(
      actor?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { actor: string; token: string; amount: BigNumber }
    >;

    BridgeLiquidityRemoved(
      actor?: null,
      token?: null,
      amountRemoved?: null,
      owedNetwork?: null,
      owedToken?: null,
      owedLiquidity?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string, BigNumber],
      {
        actor: string;
        token: string;
        amountRemoved: BigNumber;
        owedNetwork: BigNumber;
        owedToken: string;
        owedLiquidity: BigNumber;
      }
    >;

    BridgeSwap(
      from?: null,
      originToken?: null,
      token?: null,
      targetNetwork?: null,
      targetToken?: null,
      swapTargetTokenTo?: null,
      targetAddress?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string, string, string, BigNumber],
      {
        from: string;
        originToken: string;
        token: string;
        targetNetwork: BigNumber;
        targetToken: string;
        swapTargetTokenTo: string;
        targetAddress: string;
        amount: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    QuorumCreated(
      quorum?: null
    ): TypedEventFilter<
      [
        [string, BigNumber, number, number] & {
          id: string;
          groupId: BigNumber;
          minSignatures: number;
          ownerGroupId: number;
        }
      ],
      {
        quorum: [string, BigNumber, number, number] & {
          id: string;
          groupId: BigNumber;
          minSignatures: number;
          ownerGroupId: number;
        };
      }
    >;

    QuorumUpdated(
      quorum?: null
    ): TypedEventFilter<
      [
        [string, BigNumber, number, number] & {
          id: string;
          groupId: BigNumber;
          minSignatures: number;
          ownerGroupId: number;
        }
      ],
      {
        quorum: [string, BigNumber, number, number] & {
          id: string;
          groupId: BigNumber;
          minSignatures: number;
          ownerGroupId: number;
        };
      }
    >;

    RemovedFromQuorum(
      quorumId?: null,
      subscriber?: null
    ): TypedEventFilter<
      [string, string],
      { quorumId: string; subscriber: string }
    >;

    TransferBySignature(
      receiver?: null,
      token?: null,
      amount?: null,
      fee?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { receiver: string; token: string; amount: BigNumber; fee: BigNumber }
    >;
  };

  estimateGas: {
    DEFAULT_FEE_X10000(overrides?: CallOverrides): Promise<BigNumber>;

    GOVERNANCE_GROUP_ID_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      to: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToQuorum(
      _address: string,
      quorumId: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    cancelSaltedSignature(
      salt: BytesLike,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    forceRemoveFromQuorum(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      ownerGroupId: BigNumberish,
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    inventory(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidity(
      token: string,
      liquidityAdder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    quorumList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorumSubscriptions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorums(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    quorumsSubscribers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveTokenFrom(
      token: string,
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeFromQuorum(
      _address: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      to: string,
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityIfPossible(
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquiditySigned(
      token: string,
      payee: string,
      amount: BigNumberish,
      sourceChainId: BigNumberish,
      txId: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    routingTable(overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeDistributor(
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoutingTable(
      _routingTable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      to: string,
      token: string,
      targetNetwork: BigNumberish,
      targetToken: string,
      swapTargetTokenTo: string,
      targetAddress: string,
      originToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMinSignature(
      quorumId: string,
      minSignature: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawSigned(
      token: string,
      payee: string,
      amount: BigNumberish,
      swapToToken: string,
      sourceChainId: BigNumberish,
      swapTxId: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawSignedVerify(
      token: string,
      payee: string,
      amount: BigNumberish,
      swapToToken: string,
      sourceChainId: BigNumberish,
      swapTxId: BytesLike,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_FEE_X10000(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GOVERNANCE_GROUP_ID_MAX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      to: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToQuorum(
      _address: string,
      quorumId: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelSaltedSignature(
      salt: BytesLike,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceRemoveFromQuorum(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      ownerGroupId: BigNumberish,
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    inventory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidity(
      token: string,
      liquidityAdder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quorumList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorumSubscriptions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorums(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorumsSubscribers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveTokenFrom(
      token: string,
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeFromQuorum(
      _address: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      to: string,
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityIfPossible(
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquiditySigned(
      token: string,
      payee: string,
      amount: BigNumberish,
      sourceChainId: BigNumberish,
      txId: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    routingTable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeDistributor(
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoutingTable(
      _routingTable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      to: string,
      token: string,
      targetNetwork: BigNumberish,
      targetToken: string,
      swapTargetTokenTo: string,
      targetAddress: string,
      originToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMinSignature(
      quorumId: string,
      minSignature: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usedHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawSigned(
      token: string,
      payee: string,
      amount: BigNumberish,
      swapToToken: string,
      sourceChainId: BigNumberish,
      swapTxId: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSignedVerify(
      token: string,
      payee: string,
      amount: BigNumberish,
      swapToToken: string,
      sourceChainId: BigNumberish,
      swapTxId: BytesLike,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
