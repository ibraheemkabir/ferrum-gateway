/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IronSafeInterface extends ethers.utils.Interface {
  functions: {
    "GOVERNANCE_GROUP_ID_MAX()": FunctionFragment;
    "NAME()": FunctionFragment;
    "RemoveAmm(address,bytes32,bytes)": FunctionFragment;
    "VERSION()": FunctionFragment;
    "addAmm(address,bytes32,bytes)": FunctionFragment;
    "addPolicies(tuple[],bytes32,bytes)": FunctionFragment;
    "addToQuorum(address,address,bytes32,uint64,bytes)": FunctionFragment;
    "addUserToRole(address,uint8,bytes32,bytes)": FunctionFragment;
    "admin()": FunctionFragment;
    "amms(address)": FunctionFragment;
    "cancelSaltedSignature(bytes32,uint64,bytes)": FunctionFragment;
    "forceRemoveFromQuorum(address)": FunctionFragment;
    "init(address,uint64,uint16,uint8,address[],address[])": FunctionFragment;
    "initialize(address,uint64,uint16,uint8,address[])": FunctionFragment;
    "owner()": FunctionFragment;
    "policyDaily(address,uint8)": FunctionFragment;
    "policyMonthly(address,uint8)": FunctionFragment;
    "quorumList(uint256)": FunctionFragment;
    "quorumSubscriptions(address)": FunctionFragment;
    "quorums(address)": FunctionFragment;
    "quorumsSubscribers(address)": FunctionFragment;
    "removeFromQuorum(address,bytes32,uint64,bytes)": FunctionFragment;
    "removePolicies(tuple[],bytes32,bytes)": FunctionFragment;
    "removeUserFromRole(address,bytes32,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "roles(address)": FunctionFragment;
    "sendEthRoled(address,uint256)": FunctionFragment;
    "sendEthSigned(address,uint256,bytes32,bytes)": FunctionFragment;
    "sendRoled(address,address,uint256)": FunctionFragment;
    "sendSigned(address,address,uint256,bytes32,bytes)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "swapExactETHForToken(address,uint256,uint256,address[],uint256)": FunctionFragment;
    "swapExactTokensForEth(address,uint256,uint256,address[],uint256)": FunctionFragment;
    "swapExactTokensForToken(address,uint256,uint256,address[],uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateMinSignature(address,uint16,bytes32,uint64,bytes)": FunctionFragment;
    "usedHashes(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "GOVERNANCE_GROUP_ID_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "RemoveAmm",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addAmm",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addPolicies",
    values: [
      {
        token: string;
        applicableTime: BigNumberish;
        requiredRole: BigNumberish;
        policy: BigNumberish;
        value: BigNumberish;
      }[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addToQuorum",
    values: [string, string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addUserToRole",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "amms", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancelSaltedSignature",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forceRemoveFromQuorum",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string[],
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "policyDaily",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "policyMonthly",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumSubscriptions",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "quorums", values: [string]): string;
  encodeFunctionData(
    functionFragment: "quorumsSubscribers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromQuorum",
    values: [string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removePolicies",
    values: [{ token: string; policy: BigNumberish }[], BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUserFromRole",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roles", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sendEthRoled",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendEthSigned",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRoled",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendSigned",
    values: [string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForToken",
    values: [string, BigNumberish, BigNumberish, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForEth",
    values: [string, BigNumberish, BigNumberish, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForToken",
    values: [string, BigNumberish, BigNumberish, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinSignature",
    values: [string, BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usedHashes",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "GOVERNANCE_GROUP_ID_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RemoveAmm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAmm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addUserToRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "amms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelSaltedSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceRemoveFromQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "policyDaily",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyMonthly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quorumList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quorums", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumsSubscribers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeUserFromRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendEthRoled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendEthSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendRoled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendSigned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedHashes", data: BytesLike): Result;

  events: {
    "AddedToQuorum(address,address)": EventFragment;
    "AdminSet(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "QuorumCreated(tuple)": EventFragment;
    "QuorumUpdated(tuple)": EventFragment;
    "RemovedFromQuorum(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedToQuorum"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedFromQuorum"): EventFragment;
}

export class IronSafe extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IronSafeInterface;

  functions: {
    GOVERNANCE_GROUP_ID_MAX(overrides?: CallOverrides): Promise<[number]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    RemoveAmm(
      amm: string,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    addAmm(
      amm: string,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPolicies(
      items: {
        token: string;
        applicableTime: BigNumberish;
        requiredRole: BigNumberish;
        policy: BigNumberish;
        value: BigNumberish;
      }[],
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToQuorum(
      _address: string,
      quorumId: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addUserToRole(
      user: string,
      role: BigNumberish,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    amms(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    cancelSaltedSignature(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceRemoveFromQuorum(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      ownerGroupId: BigNumberish,
      addresses: string[],
      _amms: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      ownerGroupId: BigNumberish,
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    policyDaily(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { policy: number; value: BigNumber }>;

    policyMonthly(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { policy: number; value: BigNumber }>;

    quorumList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    quorumSubscriptions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        id: string;
        groupId: BigNumber;
        minSignatures: number;
        ownerGroupId: number;
      }
    >;

    quorums(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        id: string;
        groupId: BigNumber;
        minSignatures: number;
        ownerGroupId: number;
      }
    >;

    quorumsSubscribers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeFromQuorum(
      _address: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePolicies(
      policies: { token: string; policy: BigNumberish }[],
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeUserFromRole(
      user: string,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roles(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    sendEthRoled(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendEthSigned(
      to: string,
      amount: BigNumberish,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendRoled(
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendSigned(
      to: string,
      token: string,
      amount: BigNumberish,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactETHForToken(
      swapRouter: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForEth(
      swapRouter: string,
      amountIn: BigNumberish,
      amountMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForToken(
      swapRouter: string,
      amountIn: BigNumberish,
      amountMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMinSignature(
      quorumId: string,
      minSignature: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
  };

  GOVERNANCE_GROUP_ID_MAX(overrides?: CallOverrides): Promise<number>;

  NAME(overrides?: CallOverrides): Promise<string>;

  RemoveAmm(
    amm: string,
    salt: BytesLike,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  addAmm(
    amm: string,
    salt: BytesLike,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPolicies(
    items: {
      token: string;
      applicableTime: BigNumberish;
      requiredRole: BigNumberish;
      policy: BigNumberish;
      value: BigNumberish;
    }[],
    salt: BytesLike,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToQuorum(
    _address: string,
    quorumId: string,
    salt: BytesLike,
    expiry: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addUserToRole(
    user: string,
    role: BigNumberish,
    salt: BytesLike,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  amms(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  cancelSaltedSignature(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceRemoveFromQuorum(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    quorumId: string,
    groupId: BigNumberish,
    minSignatures: BigNumberish,
    ownerGroupId: BigNumberish,
    addresses: string[],
    _amms: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    quorumId: string,
    groupId: BigNumberish,
    minSignatures: BigNumberish,
    ownerGroupId: BigNumberish,
    addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  policyDaily(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { policy: number; value: BigNumber }>;

  policyMonthly(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { policy: number; value: BigNumber }>;

  quorumList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  quorumSubscriptions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, number] & {
      id: string;
      groupId: BigNumber;
      minSignatures: number;
      ownerGroupId: number;
    }
  >;

  quorums(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, number] & {
      id: string;
      groupId: BigNumber;
      minSignatures: number;
      ownerGroupId: number;
    }
  >;

  quorumsSubscribers(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeFromQuorum(
    _address: string,
    salt: BytesLike,
    expiry: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePolicies(
    policies: { token: string; policy: BigNumberish }[],
    salt: BytesLike,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeUserFromRole(
    user: string,
    salt: BytesLike,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roles(arg0: string, overrides?: CallOverrides): Promise<number>;

  sendEthRoled(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendEthSigned(
    to: string,
    amount: BigNumberish,
    salt: BytesLike,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendRoled(
    to: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendSigned(
    to: string,
    token: string,
    amount: BigNumberish,
    salt: BytesLike,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactETHForToken(
    swapRouter: string,
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForEth(
    swapRouter: string,
    amountIn: BigNumberish,
    amountMin: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForToken(
    swapRouter: string,
    amountIn: BigNumberish,
    amountMin: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMinSignature(
    quorumId: string,
    minSignature: BigNumberish,
    salt: BytesLike,
    expiry: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    GOVERNANCE_GROUP_ID_MAX(overrides?: CallOverrides): Promise<number>;

    NAME(overrides?: CallOverrides): Promise<string>;

    RemoveAmm(
      amm: string,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    addAmm(
      amm: string,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addPolicies(
      items: {
        token: string;
        applicableTime: BigNumberish;
        requiredRole: BigNumberish;
        policy: BigNumberish;
        value: BigNumberish;
      }[],
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addToQuorum(
      _address: string,
      quorumId: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addUserToRole(
      user: string,
      role: BigNumberish,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    amms(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    cancelSaltedSignature(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    forceRemoveFromQuorum(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<void>;

    init(
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      ownerGroupId: BigNumberish,
      addresses: string[],
      _amms: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      ownerGroupId: BigNumberish,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    policyDaily(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { policy: number; value: BigNumber }>;

    policyMonthly(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { policy: number; value: BigNumber }>;

    quorumList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    quorumSubscriptions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        id: string;
        groupId: BigNumber;
        minSignatures: number;
        ownerGroupId: number;
      }
    >;

    quorums(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        id: string;
        groupId: BigNumber;
        minSignatures: number;
        ownerGroupId: number;
      }
    >;

    quorumsSubscribers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFromQuorum(
      _address: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removePolicies(
      policies: { token: string; policy: BigNumberish }[],
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeUserFromRole(
      user: string,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    roles(arg0: string, overrides?: CallOverrides): Promise<number>;

    sendEthRoled(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendEthSigned(
      to: string,
      amount: BigNumberish,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sendRoled(
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendSigned(
      to: string,
      token: string,
      amount: BigNumberish,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    swapExactETHForToken(
      swapRouter: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForEth(
      swapRouter: string,
      amountIn: BigNumberish,
      amountMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForToken(
      swapRouter: string,
      amountIn: BigNumberish,
      amountMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinSignature(
      quorumId: string,
      minSignature: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    AddedToQuorum(
      quorumId?: null,
      subscriber?: null
    ): TypedEventFilter<
      [string, string],
      { quorumId: string; subscriber: string }
    >;

    AdminSet(admin?: null): TypedEventFilter<[string], { admin: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    QuorumCreated(
      quorum?: null
    ): TypedEventFilter<
      [
        [string, BigNumber, number, number] & {
          id: string;
          groupId: BigNumber;
          minSignatures: number;
          ownerGroupId: number;
        }
      ],
      {
        quorum: [string, BigNumber, number, number] & {
          id: string;
          groupId: BigNumber;
          minSignatures: number;
          ownerGroupId: number;
        };
      }
    >;

    QuorumUpdated(
      quorum?: null
    ): TypedEventFilter<
      [
        [string, BigNumber, number, number] & {
          id: string;
          groupId: BigNumber;
          minSignatures: number;
          ownerGroupId: number;
        }
      ],
      {
        quorum: [string, BigNumber, number, number] & {
          id: string;
          groupId: BigNumber;
          minSignatures: number;
          ownerGroupId: number;
        };
      }
    >;

    RemovedFromQuorum(
      quorumId?: null,
      subscriber?: null
    ): TypedEventFilter<
      [string, string],
      { quorumId: string; subscriber: string }
    >;
  };

  estimateGas: {
    GOVERNANCE_GROUP_ID_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    RemoveAmm(
      amm: string,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addAmm(
      amm: string,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPolicies(
      items: {
        token: string;
        applicableTime: BigNumberish;
        requiredRole: BigNumberish;
        policy: BigNumberish;
        value: BigNumberish;
      }[],
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToQuorum(
      _address: string,
      quorumId: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addUserToRole(
      user: string,
      role: BigNumberish,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    amms(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelSaltedSignature(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceRemoveFromQuorum(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      ownerGroupId: BigNumberish,
      addresses: string[],
      _amms: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      ownerGroupId: BigNumberish,
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    policyDaily(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    policyMonthly(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorumList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorumSubscriptions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorums(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    quorumsSubscribers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFromQuorum(
      _address: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePolicies(
      policies: { token: string; policy: BigNumberish }[],
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeUserFromRole(
      user: string,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    sendEthRoled(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendEthSigned(
      to: string,
      amount: BigNumberish,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendRoled(
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendSigned(
      to: string,
      token: string,
      amount: BigNumberish,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactETHForToken(
      swapRouter: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactTokensForEth(
      swapRouter: string,
      amountIn: BigNumberish,
      amountMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactTokensForToken(
      swapRouter: string,
      amountIn: BigNumberish,
      amountMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMinSignature(
      quorumId: string,
      minSignature: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    GOVERNANCE_GROUP_ID_MAX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RemoveAmm(
      amm: string,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAmm(
      amm: string,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPolicies(
      items: {
        token: string;
        applicableTime: BigNumberish;
        requiredRole: BigNumberish;
        policy: BigNumberish;
        value: BigNumberish;
      }[],
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToQuorum(
      _address: string,
      quorumId: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addUserToRole(
      user: string,
      role: BigNumberish,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    amms(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelSaltedSignature(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceRemoveFromQuorum(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      ownerGroupId: BigNumberish,
      addresses: string[],
      _amms: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      ownerGroupId: BigNumberish,
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    policyDaily(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    policyMonthly(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorumList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorumSubscriptions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorums(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorumsSubscribers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFromQuorum(
      _address: string,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePolicies(
      policies: { token: string; policy: BigNumberish }[],
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeUserFromRole(
      user: string,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendEthRoled(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendEthSigned(
      to: string,
      amount: BigNumberish,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendRoled(
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendSigned(
      to: string,
      token: string,
      amount: BigNumberish,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactETHForToken(
      swapRouter: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForEth(
      swapRouter: string,
      amountIn: BigNumberish,
      amountMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForToken(
      swapRouter: string,
      amountIn: BigNumberish,
      amountMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMinSignature(
      quorumId: string,
      minSignature: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usedHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
