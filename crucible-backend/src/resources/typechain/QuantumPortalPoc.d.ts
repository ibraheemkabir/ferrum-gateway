/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface QuantumPortalPocInterface extends ethers.utils.Interface {
  functions: {
    "feeManager()": FunctionFragment;
    "inventory(address)": FunctionFragment;
    "msgSender()": FunctionFragment;
    "owner()": FunctionFragment;
    "receiveTokenFrom(address,address,uint256)": FunctionFragment;
    "remoteReceive()": FunctionFragment;
    "remoteReceiveAll()": FunctionFragment;
    "remoteTransfer(uint256,address,address,uint256)": FunctionFragment;
    "remoteWithdraw(uint256,address,address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revertContext()": FunctionFragment;
    "run(uint256,uint256,address,bytes)": FunctionFragment;
    "runWithMultiValue(uint256,address[],address,uint256,address,bytes)": FunctionFragment;
    "runWithValue(uint256,address,address,uint256,address,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "feeManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "inventory", values: [string]): string;
  encodeFunctionData(functionFragment: "msgSender", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveTokenFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remoteReceive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remoteReceiveAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remoteTransfer",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remoteWithdraw",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revertContext",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "run",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "runWithMultiValue",
    values: [BigNumberish, string[], string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "runWithValue",
    values: [BigNumberish, string, string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "feeManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inventory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "msgSender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveTokenFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remoteReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remoteReceiveAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remoteTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remoteWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "run", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "runWithMultiValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "runWithValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class QuantumPortalPoc extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: QuantumPortalPocInterface;

  functions: {
    feeManager(overrides?: CallOverrides): Promise<[string]>;

    inventory(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    msgSender(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { senderNetwork: BigNumber; senderAddress: string }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    receiveTokenFrom(
      token: string,
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remoteReceive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remoteReceiveAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remoteTransfer(
      chainId: BigNumberish,
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remoteWithdraw(
      chainId: BigNumberish,
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revertContext(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    run(
      fee: BigNumberish,
      remoteChain: BigNumberish,
      remoteContract: string,
      remoteMethodCall: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    runWithMultiValue(
      fee: BigNumberish,
      tokens: string[],
      origin: string,
      remoteChain: BigNumberish,
      remoteContract: string,
      method: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    runWithValue(
      fee: BigNumberish,
      token: string,
      origin: string,
      remoteChain: BigNumberish,
      remoteContract: string,
      method: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  feeManager(overrides?: CallOverrides): Promise<string>;

  inventory(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  msgSender(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { senderNetwork: BigNumber; senderAddress: string }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  receiveTokenFrom(
    token: string,
    from: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remoteReceive(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remoteReceiveAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remoteTransfer(
    chainId: BigNumberish,
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remoteWithdraw(
    chainId: BigNumberish,
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revertContext(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  run(
    fee: BigNumberish,
    remoteChain: BigNumberish,
    remoteContract: string,
    remoteMethodCall: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  runWithMultiValue(
    fee: BigNumberish,
    tokens: string[],
    origin: string,
    remoteChain: BigNumberish,
    remoteContract: string,
    method: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  runWithValue(
    fee: BigNumberish,
    token: string,
    origin: string,
    remoteChain: BigNumberish,
    remoteContract: string,
    method: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    feeManager(overrides?: CallOverrides): Promise<string>;

    inventory(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    msgSender(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { senderNetwork: BigNumber; senderAddress: string }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    receiveTokenFrom(
      token: string,
      from: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    remoteReceive(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string] & {
        remoteChainId: BigNumber;
        token: string;
        amount: BigNumber;
        origin: string;
      }
    >;

    remoteReceiveAll(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[], BigNumber[], string] & {
        remoteChainId: BigNumber;
        tokens: string[];
        amounts: BigNumber[];
        origin: string;
      }
    >;

    remoteTransfer(
      chainId: BigNumberish,
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    remoteWithdraw(
      chainId: BigNumberish,
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revertContext(overrides?: CallOverrides): Promise<void>;

    run(
      fee: BigNumberish,
      remoteChain: BigNumberish,
      remoteContract: string,
      remoteMethodCall: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    runWithMultiValue(
      fee: BigNumberish,
      tokens: string[],
      origin: string,
      remoteChain: BigNumberish,
      remoteContract: string,
      method: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    runWithValue(
      fee: BigNumberish,
      token: string,
      origin: string,
      remoteChain: BigNumberish,
      remoteContract: string,
      method: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    feeManager(overrides?: CallOverrides): Promise<BigNumber>;

    inventory(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    msgSender(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    receiveTokenFrom(
      token: string,
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remoteReceive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remoteReceiveAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remoteTransfer(
      chainId: BigNumberish,
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remoteWithdraw(
      chainId: BigNumberish,
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revertContext(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    run(
      fee: BigNumberish,
      remoteChain: BigNumberish,
      remoteContract: string,
      remoteMethodCall: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    runWithMultiValue(
      fee: BigNumberish,
      tokens: string[],
      origin: string,
      remoteChain: BigNumberish,
      remoteContract: string,
      method: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    runWithValue(
      fee: BigNumberish,
      token: string,
      origin: string,
      remoteChain: BigNumberish,
      remoteContract: string,
      method: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    feeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inventory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    msgSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiveTokenFrom(
      token: string,
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remoteReceive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remoteReceiveAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remoteTransfer(
      chainId: BigNumberish,
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remoteWithdraw(
      chainId: BigNumberish,
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revertContext(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    run(
      fee: BigNumberish,
      remoteChain: BigNumberish,
      remoteContract: string,
      remoteMethodCall: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    runWithMultiValue(
      fee: BigNumberish,
      tokens: string[],
      origin: string,
      remoteChain: BigNumberish,
      remoteContract: string,
      method: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    runWithValue(
      fee: BigNumberish,
      token: string,
      origin: string,
      remoteChain: BigNumberish,
      remoteContract: string,
      method: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
