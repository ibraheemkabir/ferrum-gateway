/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface QuantumPortalLedgerMgrInterface extends ethers.utils.Interface {
  functions: {
    "authorityFinalizers(bytes32,uint256)": FunctionFragment;
    "blockByNonce(uint64,uint64)": FunctionFragment;
    "finalizations(bytes32)": FunctionFragment;
    "finalize(uint256,uint256)": FunctionFragment;
    "isLocalBlockReady(uint64)": FunctionFragment;
    "lastRemoteBlock(uint64)": FunctionFragment;
    "localBlocks(uint256,uint256)": FunctionFragment;
    "mineRemoteBlock(uint256)": FunctionFragment;
    "minedBlocks(uint256,uint256)": FunctionFragment;
    "pendingTransactions()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "authorityFinalizers",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blockByNonce",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isLocalBlockReady",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRemoteBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "localBlocks",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mineRemoteBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minedBlocks",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingTransactions",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "authorityFinalizers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockByNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLocalBlockReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRemoteBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "localBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mineRemoteBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minedBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingTransactions",
    data: BytesLike
  ): Result;

  events: {};
}

export class QuantumPortalLedgerMgr extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: QuantumPortalLedgerMgrInterface;

  functions: {
    authorityFinalizers(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    blockByNonce(
      chainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        },
        ([
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string[],
          BigNumber[],
          string
        ] & {
          timestamp: BigNumber;
          remoteChainId: BigNumber;
          blockNonce: BigNumber;
          remoteContract: string;
          remoteOrigin: string;
          tokens: string[];
          amounts: BigNumber[];
          method: string;
        })[]
      ] & {
        _block: [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        };
        transactions: ([
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string[],
          BigNumber[],
          string
        ] & {
          timestamp: BigNumber;
          remoteChainId: BigNumber;
          blockNonce: BigNumber;
          remoteContract: string;
          remoteOrigin: string;
          tokens: string[];
          amounts: BigNumber[];
          method: string;
        })[];
      }
    >;

    finalizations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        executor: string;
        finalizedBlocksHash: string;
        finalizersHash: string;
        totalBlockStake: BigNumber;
      }
    >;

    finalize(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isLocalBlockReady(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastRemoteBlock(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { blockNonce: BigNumber }>;

    localBlocks(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string, string] & {
        timestamp: BigNumber;
        remoteChainId: BigNumber;
        blockNonce: BigNumber;
        remoteContract: string;
        remoteOrigin: string;
        method: string;
      }
    >;

    mineRemoteBlock(
      remoteChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minedBlocks(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        }
      ] & {
        blockHash: string;
        miner: string;
        finalizer: string;
        stake: BigNumber;
        totalValue: BigNumber;
        blockMetadata: [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        };
      }
    >;

    pendingTransactions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  authorityFinalizers(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  blockByNonce(
    chainId: BigNumberish,
    blockNonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      },
      ([
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string[],
        BigNumber[],
        string
      ] & {
        timestamp: BigNumber;
        remoteChainId: BigNumber;
        blockNonce: BigNumber;
        remoteContract: string;
        remoteOrigin: string;
        tokens: string[];
        amounts: BigNumber[];
        method: string;
      })[]
    ] & {
      _block: [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      };
      transactions: ([
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string[],
        BigNumber[],
        string
      ] & {
        timestamp: BigNumber;
        remoteChainId: BigNumber;
        blockNonce: BigNumber;
        remoteContract: string;
        remoteOrigin: string;
        tokens: string[];
        amounts: BigNumber[];
        method: string;
      })[];
    }
  >;

  finalizations(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber] & {
      executor: string;
      finalizedBlocksHash: string;
      finalizersHash: string;
      totalBlockStake: BigNumber;
    }
  >;

  finalize(
    remoteChainId: BigNumberish,
    blockNonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isLocalBlockReady(
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastRemoteBlock(
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  localBlocks(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, string, string] & {
      timestamp: BigNumber;
      remoteChainId: BigNumber;
      blockNonce: BigNumber;
      remoteContract: string;
      remoteOrigin: string;
      method: string;
    }
  >;

  mineRemoteBlock(
    remoteChainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minedBlocks(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      }
    ] & {
      blockHash: string;
      miner: string;
      finalizer: string;
      stake: BigNumber;
      totalValue: BigNumber;
      blockMetadata: [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      };
    }
  >;

  pendingTransactions(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authorityFinalizers(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    blockByNonce(
      chainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        },
        ([
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string[],
          BigNumber[],
          string
        ] & {
          timestamp: BigNumber;
          remoteChainId: BigNumber;
          blockNonce: BigNumber;
          remoteContract: string;
          remoteOrigin: string;
          tokens: string[];
          amounts: BigNumber[];
          method: string;
        })[]
      ] & {
        _block: [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        };
        transactions: ([
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string[],
          BigNumber[],
          string
        ] & {
          timestamp: BigNumber;
          remoteChainId: BigNumber;
          blockNonce: BigNumber;
          remoteContract: string;
          remoteOrigin: string;
          tokens: string[];
          amounts: BigNumber[];
          method: string;
        })[];
      }
    >;

    finalizations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        executor: string;
        finalizedBlocksHash: string;
        finalizersHash: string;
        totalBlockStake: BigNumber;
      }
    >;

    finalize(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isLocalBlockReady(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastRemoteBlock(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    localBlocks(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string, string] & {
        timestamp: BigNumber;
        remoteChainId: BigNumber;
        blockNonce: BigNumber;
        remoteContract: string;
        remoteOrigin: string;
        method: string;
      }
    >;

    mineRemoteBlock(
      remoteChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minedBlocks(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        }
      ] & {
        blockHash: string;
        miner: string;
        finalizer: string;
        stake: BigNumber;
        totalValue: BigNumber;
        blockMetadata: [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        };
      }
    >;

    pendingTransactions(
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string[],
        BigNumber[],
        string
      ] & {
        timestamp: BigNumber;
        remoteChainId: BigNumber;
        blockNonce: BigNumber;
        remoteContract: string;
        remoteOrigin: string;
        tokens: string[];
        amounts: BigNumber[];
        method: string;
      })[]
    >;
  };

  filters: {};

  estimateGas: {
    authorityFinalizers(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blockByNonce(
      chainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalize(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isLocalBlockReady(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRemoteBlock(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    localBlocks(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mineRemoteBlock(
      remoteChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minedBlocks(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingTransactions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authorityFinalizers(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blockByNonce(
      chainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalize(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isLocalBlockReady(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRemoteBlock(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    localBlocks(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mineRemoteBlock(
      remoteChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minedBlocks(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingTransactions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
